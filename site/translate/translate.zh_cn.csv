location,zh_cn
site/app/components/code-block.html,复制
site/app/components/code-block.js,代码已复制！
site/app/components/code-example.html,显示示例
site/app/components/code-example.html,显示 javascript 代码
site/app/components/code-example.html,显示 html 代码
site/app/components/code-example.html,显示 scss 代码
site/app/layout/footer.html,关于
site/app/layout/footer.html,许可证
site/app/layout/header.js,默认蓝
site/app/layout/header.js,暗夜蓝
site/app/layout/header.js,炫酷紫
site/app/layout/header.js,暗夜紫
site/app/layout/nav-content.js,首页
site/app/layout/nav-content.js,快速上手
site/app/layout/nav-content.js,主题
site/app/layout/nav-content.js,路由整合
site/app/layout/nav-content.js,国际化
site/app/layout/nav-content.js,UI 规范
site/app/layout/nav-content.js,阴影|Elevation
site/app/layout/nav-content.js,布局|Layout
site/app/layout/nav-content.js,版式|Typography
site/app/layout/nav-content.js,状态|States
site/app/layout/nav-content.js,组件
site/app/layout/nav-content.js,头像|Avatar
site/app/layout/nav-content.js,徽章|Badge
site/app/layout/nav-content.js,底栏|Bottom Bar
site/app/layout/nav-content.js,按钮|Button
site/app/layout/nav-content.js,卡片|Card
site/app/layout/nav-content.js,内容|Content
site/app/layout/nav-content.js,日期选择|Datepicker
site/app/layout/nav-content.js,对话框|Dialog
site/app/layout/nav-content.js,分隔线|Divider
site/app/layout/nav-content.js,抽屉|Drawer
site/app/layout/nav-content.js,空提示|Empty State
site/app/layout/nav-content.js,表单|Forms
site/app/layout/nav-content.js,自动补全|Autocomplete
site/app/layout/nav-content.js,多选框|Checkbox
site/app/layout/nav-content.js,纸片|Chips
site/app/layout/nav-content.js,文件选择|File
site/app/layout/nav-content.js,文本框|Input & Textarea
site/app/layout/nav-content.js,单选项|Radio
site/app/layout/nav-content.js,下拉选择|Select
site/app/layout/nav-content.js,切换|Switch
site/app/layout/nav-content.js,文本高亮|Highlight
site/app/layout/nav-content.js,图标|Icon
site/app/layout/nav-content.js,列表|List
site/app/layout/nav-content.js,菜单|Menu
site/app/layout/nav-content.js,分页|Pagination
site/app/layout/nav-content.js,气泡确认框|Popconfirm
site/app/layout/nav-content.js,气泡卡片|Popover
site/app/layout/nav-content.js,进度条|Progress
site/app/layout/nav-content.js,消息提示|Snackbar
site/app/layout/nav-content.js,正在加载|Spinner
site/app/layout/nav-content.js,步骤条|Steppers
site/app/layout/nav-content.js,子标题|Subheader
site/app/layout/nav-content.js,表格|Table
site/app/layout/nav-content.js,标签页|Tabs
site/app/layout/nav-content.js,工具栏|Toolbar
site/app/layout/nav-content.js,工具提示|Tooltip
site/app/layout/nav-content.js,关于
site/app/layout/nav-content.js,许可证
site/app/pages/about.html,构建在 Jinge 框架上的 Material Design 组件库
site/app/pages/about.html,作者
site/app/pages/about.html,项目介绍
site/app/pages/about.html,"<p>在长期的业务项目研发中，我探索并开发了一个和主流 mvvm 框架的核心都不同的 <a target=""_blank"" href=""https://github.com/YuhangGe/jinge"">Jinge</a> 框架。为了验证这个框架的能力，我决定在这个框架上开发一个 UI 组件库。</p><p>考虑到主要是为了快速验证 Jinge 框架的能力，并在组件库开发的过程中同步地不断完善这个框架，而不想在组件本身的开发上耗费过多精力，我决定直接从 <a target=""_blank"" href=""https://vuematerial.io"">Vue Material</a> 这个项目分叉（Fork）。</p><p>但由于 Jinge 框架和 Vue 框架除了在功能和使用方式上都保持了现代 mvvm 框架的一致性外，核心几乎完全不同，因此从 Vue Material 项目分叉后，会需要把整个项目除了 scss 样式之外的代码几乎全部重写。因此我并没有采用在 Github 平台上直接分叉（Fork）该项目的方式，而是另起炉灶新开了 Jinge Material 仓库。所以更准确的说法是，Jinge Materail 项目移植（Port）自 Vue Material 项目。</p><p>Jinge Material 在移植自 Vue Material 项目的过程中，同时也参考 <a href=""https://ant.design"" target=""_blank"">Ant Design</a> 和 <a href=""https://element.eleme.cn/"" target=""_blank"">Element</a> 等现代组件库，对项目的目录结构和各别组件的设计进行了重构。</p>"
site/app/pages/about.html,关于
site/app/pages/advance/i18n.html,国际化
site/app/pages/advance/i18n.html,jinge 框架还处于实验性的 alpha 阶段，也还几乎没有文档。此处的 Jinge Material 组件库的文档也不保证有效。
site/app/pages/advance/i18n.html,Jinge Material 组件库没有直接依赖 jinge 框架内置的国际化方案，而是自己实现了一套国际化方案。因为使用 Jinge Material 组件的项目不一定需要支持多语言。接下来会分不同的情况，介绍如何使用不同语言的 Jinge Material 组件。
site/app/pages/advance/i18n.html,使用 npm 或 yarn 包
site/app/pages/advance/i18n.html,项目只使用一种语言
site/app/pages/advance/i18n.html,如果只需要支持一种语言，只需要在项目的入口文件里，加入以下的代码：
site/app/pages/advance/i18n.html,Jinge Material 组件库没有默认的语言，因此必须指定语言并引入语言资源。
site/app/pages/advance/i18n.html,项目使用多种语言
site/app/pages/advance/i18n.html,如果需要支持多种语言，建议一次性将项目需要支持的语言资源全部引入。这样做的好处是切换语言时不再需要额外的通过 ajax 加载资源的逻辑，并且 Jinge Material 的语言资源也很小，不会引入带宽负担。加载的资源可以存放在某个 service 中，比如：
site/app/pages/advance/i18n.html,然后将上述的 service 暴露给业务层，比如项目的入口文件设置默认语言，或者在某个按钮的点击事件中切换语言：
site/app/pages/advance/i18n.html,使用浏览器引入的 script
site/app/pages/advance/i18n.html,通过浏览器引入 script 的方式使用 Jinge Material 时，多语言资源文件需要保证在 jinge-material.min.js 文件之后执行。语言资源文件会向 `JingeMaterial` 对象的 `locales` 属性字典写入对应的值。然后在业务代码中，只需要使用这个 `locales` 属性，即可得到所有语言资源。
site/app/pages/advance/i18n.html,具体来讲，在 html 文件中，用如下的方式加载 script：
site/app/pages/advance/i18n.html,也可以一次性加载涵盖所有语言资源的包（Gzip 压缩和 CDN 加载后，加载全部语言资源也几乎不影响启动速度）：
site/app/pages/advance/i18n.html,然后在业务 js 代码中，用如下的方式配置默认语言（或切换语言）：
site/app/pages/advance/i18n.html,上述代码需要在打包工具中配置对 jinge-material 的引用指向 window.JingeMaterial 对象，比如 webpack.config.js 中配置 externals。
site/app/pages/advance/i18n.html,补充
site/app/pages/advance/i18n.html,通过 npm 或 yarn 包的方式使用 jinge-materail，但又一定要用 ajax 的方式按需加载语言资源，可以有不同的实现方式。其中一种方式是，以文本的形式 fetch 到语言资源的源码，然后通过 `new Function()` 的形式包裹并执行该源码，同时传递一个 `JingeMaterial` 对象给上下文：
site/app/pages/advance/theme.html,主题
site/app/pages/advance/theme.html,"Jinge Material 组件库<router-link to=""about"">移植自 Vue Material</router-link>，但在多主题的支持上，进行了彻底地重构。主要包括两个方面："
site/app/pages/advance/theme.html,完全依赖 CSS 变量（css3 variable）来实现颜色的指定和色板的切换。
site/app/pages/advance/theme.html,完全遵循 Material Design 最新的设计规范中关于色板的规定，包括暗色主题。
site/app/pages/advance/theme.html,预置主题
site/app/pages/advance/theme.html,Jinge Material 提供了 4 个预先构建好的主题，包括蓝色（default）、紫色（purple）、暗色蓝（default-dark）和暗色紫（purple-dark）。构建好的主题文件位于 <code>dist/themes</code> 目录下，使用时只需要和主样式文件一起加载即可：
site/app/pages/advance/theme.html,自定义主题
site/app/pages/advance/theme.html,自定义主题可以通过加载自定义的主题文件（即色板文件）实现。色板里颜色的定义严格遵循 Material Design 的规范。可在参考 dist 目录下构建好的色板 css 文件创建自定义色板文件，也可以参考下面的 scss 源码创建并构建色板文件：
site/app/pages/advance/theme.html,切换主题
site/app/pages/advance/theme.html,组件的颜色全部通过 CSS 变量引用色板中定义的颜色，因此切换主题只需要简单地替换色板文件即可。从技术角度讲，替换色板本质上是替换(覆盖) CSS 变量的值。
site/app/pages/advance/theme.html,有多种方式可以实现替换（覆盖）CSS 变量的值。一种简单的方案是，在 html 中加载默认的色板时，为 <code>link</code> 元素赋予 id 属性，然后在切换主题的 js 逻辑里，通过这个 id 删除旧的<code>link</code> 元素，然后插入一个指向新主题色板的 css 文件的 <code>link</code> 元素。
site/app/pages/advance/use-router.html,路由整合
site/app/pages/advance/use-router.html,"Jinge Material 组件库中，个别组件可以直接集成 <a target=""_blank"" href=""https://github.com/jinge-design/jinge-router"">jinge-router</a> 的路由功能。"
site/app/pages/advance/use-router.html,"这些组件目前包括：<UISref to=""components.button"" text=""md-button""/>、<UISref to=""components.list"" text=""md-list-item""/>、<UISref to=""components.bottom-bar"" text=""md-bottom-bar""/> 和 <UISref to=""components.list"" text=""md-tab""/>。在这些组件上，可以直接使用 <code>router-link</code> 组件的 to、target 和 active 属性。详见这些组件的示例。"
site/app/pages/advance/use-router.html,需要说明的是，Jinge Material 组件库并不直接依赖 jinge-router，而是利用 jinge 框架的 Context 功能，在需要的时候通过 <code>__getContext('router')</code> 来获取上下文中的路由器。也就是说，如果不需要使用上述组件的路由功能，则不需要安装jinge-router 库。但如果使用了路由功能（为上述组件指定了 to 属性），但没有在整个项目中依赖 jinge-router，则会报错。
site/app/pages/components/autocomplete/api.js,名称
site/app/pages/components/autocomplete/api.js,描述
site/app/pages/components/autocomplete/api.js,示例
site/app/pages/components/autocomplete/api.js,创建自定义的匹配项
site/app/pages/components/autocomplete/api.js,将收到匹配选项的每个选项。
site/app/pages/components/autocomplete/api.js,当前输入的搜索词。
site/app/pages/components/autocomplete/api.js,在零匹配的情况下创建一个空状态
site/app/pages/components/autocomplete/api.js,默认值
site/app/pages/components/autocomplete/api.js,自动补全输入框的值
site/app/pages/components/autocomplete/api.js,要搜索的可用选项。如果为 Array，则自动完成功能将使用内部搜索引擎。 如果是 Promise，则需要您自己执行搜索（这通常是由后端服务进行的）。
site/app/pages/components/autocomplete/api.js,传递给输入框的 name 属性
site/app/pages/components/autocomplete/api.js,传递给输入框的 id 属性
site/app/pages/components/autocomplete/api.js,指定允许输入的最大的字符数量
site/app/pages/components/autocomplete/api.js,输入框的占位提示
site/app/pages/components/autocomplete/api.js,使用紧凑型的自动补全组件
site/app/pages/components/autocomplete/api.js,设置布局方式，请参见下面每种布局的详细说明。
site/app/pages/components/autocomplete/api.js,布局方式使用 floating 模式。这是默认的布局。
site/app/pages/components/autocomplete/api.js,布局方式使用 boxed 模式。
site/app/pages/components/autocomplete/api.js,禁用/启用焦点事件。 如果 false，则选项将在按键后立即显示结果。
site/app/pages/components/autocomplete/api.js,如果 option 为 object，则需要指定哪个属性将用于搜索过滤器。
site/app/pages/components/autocomplete/api.js,选项过滤器的搜索算法。如果传递的 <code>options</code> 属性是 Promise，则此选项不起作用。有关更多详细信息，请参见 <code>md-highlight</code> 的 API。
site/app/pages/components/autocomplete/api.js,参数
site/app/pages/components/autocomplete/api.js,用户在输入字段上键入时触发
site/app/pages/components/autocomplete/api.js,当用户选择一个选项时触发
site/app/pages/components/autocomplete/api.js,在打开选项面板时触发
site/app/pages/components/autocomplete/api.js,在关闭选项面板时触发
site/app/pages/components/autocomplete/index.html,输入文本可以与自动完成功能一起使用，以帮助识字能力有限或使用外语书写的用户。 例如，自动完成功能可以在输入时建议输入（每次击键都会刷新建议）。
site/app/pages/components/autocomplete/index.html,自动补全组件类似于 <code>md-field</code>，可以传递标签，验证消息，帮助程序文本甚至图标。
site/app/pages/components/autocomplete/index.html,使用静态数据
site/app/pages/components/autocomplete/index.html,如果数据量少或是静态数据，则可以通过简单直观的方式将数据选项传递给 <code>md-autocomplete</code>：
site/app/pages/components/autocomplete/index.html,触发方式
site/app/pages/components/autocomplete/index.html,默认情况下，建议在输入框获取焦点时打开自动补全。如果希望减少干扰，可以通过取消焦点事件来禁用此行为。如果是这样，则建议将在按键后立即显示：
site/app/pages/components/autocomplete/index.html,Box 布局
site/app/pages/components/autocomplete/index.html,自动补全组件可以使用两种布局：默认带有浮动标签，而盒装版式带有内联标签。框式布局将应用具有小高程的框式布局，这也非常适合用作工具栏内的搜索栏。
site/app/pages/components/autocomplete/index.html,自定义模板
site/app/pages/components/autocomplete/index.html,自动补全组件还接受自定义模板，该模板可以灵活地接受任何HTML元素并内置“空状态”。您还可以突出显示匹配项中的搜索词，以提供有关该项目为何出现在结果中的反馈。
site/app/pages/components/autocomplete/index.html,尽管 <code>md-highlight</code> 组件最常与自动补全组件一起使用，但你可以在任何地方使用它。
site/app/pages/components/autocomplete/index.html,搜索算法
site/app/pages/components/autocomplete/index.html,"自动补全组件可以使用 3 种搜索算法：<a href=""https://en.wikipedia.org/wiki/roximate_string_matching"" target=""_blank"">fuzzy</a>，includes 和 starts。"
site/app/pages/components/autocomplete/index.html,异步加载数据项
site/app/pages/components/autocomplete/index.html,很多时候需要从远程服务器的 API 接口中获取数据项。可以提供一个 <code>Promise</code>，它将使用例如后端接口中的数据进行解析。
site/app/pages/components/autocomplete/index.html,自动补全
site/app/pages/components/avatar/api.js,名称
site/app/pages/components/avatar/api.js,描述
site/app/pages/components/avatar/api.js,创建可以显示图标的头像。
site/app/pages/components/avatar/api.js,制作小头像，更改图像，图标或文字的大小。
site/app/pages/components/avatar/api.js,大头像，通常用于在 <md-drawer> 中展示当前用户头像。
site/app/pages/components/avatar/index.html,头像（Avatar）可以用来代表人物。当与特定徽标一起使用时，也可以用来代表品牌。当没有要显示的图像时，它们也可以用作占位符，例如，在还没有图片的联系人上显示姓名的首字母。
site/app/pages/components/avatar/index.html,图片
site/app/pages/components/avatar/index.html,头像可以用来展示单个图片，也可以和 <code>&lt;md-icon&gt;</code> 搭配用于展示图标。
site/app/pages/components/avatar/index.html,占位字符
site/app/pages/components/avatar/index.html,假设您要显示联系人列表，但是其中一些在数据库中没有图片。可以使用联系人姓名的首字母作为占位符，最多支持 2 个字符：
site/app/pages/components/avatar/index.html,多种大小
site/app/pages/components/avatar/index.html,可以指定三种不同的大小：常规、小或大。默认情况下，头像具有常规大小。
site/app/pages/components/avatar/index.html,头像
site/app/pages/components/badge/api.js,名称
site/app/pages/components/badge/api.js,描述
site/app/pages/components/badge/api.js,创建静态的方形徽标
site/app/pages/components/badge/api.js,默认值
site/app/pages/components/badge/api.js,指定徽章内容
site/app/pages/components/badge/api.js,指定徽章位置，<code>top</code> 或 <code>bottom</code>
site/app/pages/components/badge/api.js,使用紧凑型徽章
site/app/pages/components/badge/index.html,徽章是用于在 UI 元素上提示小状态的描述符。
site/app/pages/components/badge/index.html,按钮，头像等组件需要使用 <code>md-badge</code> 进行包装。
site/app/pages/components/badge/index.html,徽章
site/app/pages/components/bottom-bar/api.js,名称
site/app/pages/components/bottom-bar/api.js,描述
site/app/pages/components/bottom-bar/api.js,默认值
site/app/pages/components/bottom-bar/api.js,设置显示模式。请参见下面每种类型的详细说明。
site/app/pages/components/bottom-bar/api.js,用固定项目制作栏。适合少量元素。
site/app/pages/components/bottom-bar/api.js,突出显示所选项目，并隐藏其他项目的标签。适合最多达 6 个的大量元素。
site/app/pages/components/bottom-bar/api.js,动态更改所选项目，通过传递底部栏项目的 id 来实现。
site/app/pages/components/bottom-bar/api.js,项目的编号，需要动态更改所选项目时可指定
site/app/pages/components/bottom-bar/api.js,禁用底部栏，阻止包括单击在内的所有操作。
site/app/pages/components/bottom-bar/index.html,底部导航栏使您轻松单击即可浏览和在顶级视图之间切换。
site/app/pages/components/bottom-bar/index.html,和 jinge-router 无缝结合
site/app/pages/components/bottom-bar/index.html,移位效果
site/app/pages/components/bottom-bar/index.html,可以在底栏上使用超棒的移位效果。可以最多同时展示 6 个项目，并让活动项目保持焦点：
site/app/pages/components/bottom-bar/index.html,底栏
site/app/pages/components/button/api.js,名称
site/app/pages/components/button/api.js,描述
site/app/pages/components/button/api.js,默认值
site/app/pages/components/button/api.js,直接传递到原生 &lt;button&gt; 元素的 type 属性
site/app/pages/components/button/api.js,禁用按钮。
site/app/pages/components/button/api.js,是否启用 ripple 效果。
site/app/pages/components/button/api.js,事件名称
site/app/pages/components/button/api.js,参数
site/app/pages/components/button/api.js,鼠标点击事件。
site/app/pages/components/button/api.js,任意可作用到原生 &lt;button&gt; 元素的事件，组件会将事件绑定传递到原生 &lt;button&gt; 元素。
site/app/pages/components/button/api.js,主题 Primary 颜色按钮。
site/app/pages/components/button/api.js,主题 Accent 颜色按钮。
site/app/pages/components/button/api.js,创建带有阴影的凸起按钮
site/app/pages/components/button/api.js,使用紧凑型的按钮样式。
site/app/pages/components/button/api.js,使用圆形的图标按钮。
site/app/pages/components/button/api.js,使用 FAB 按钮
site/app/pages/components/button/api.js,指定 FAB 按钮的位置。位置 [position] 可选值包括：
site/app/pages/components/button/api.js,使用 fixed 模式展示按钮。推荐和上述的 6 种位置配合使用。
site/app/pages/components/button/index.html,"按钮组件用于响应用户的点（触）击操作。按钮类型包括 <strong>Flat</strong>, <strong>Raised</strong> 和 <strong>Floating</strong>。Flat 和 Raised 类型的按钮默认情况下只展示文本，但也可以通过特殊的 class 来附加图标。Floating 类型的按钮只展示图标。按钮可以通过添加 <strong>Dense</strong> 这个 class 来调整为较小的紧凑型大小。"
site/app/pages/components/button/index.html,Flat 和 Raised 类型
site/app/pages/components/button/index.html,不添加任何 class 的情况下，按钮的默认类型即 Flat。添加 <code>md-raised</code> 这个 class 即可指定按钮类型为 Raised。
site/app/pages/components/button/index.html,Regular
site/app/pages/components/button/index.html,所有按钮都有以下接口：
site/app/pages/components/button/index.html,图标类型
site/app/pages/components/button/index.html,要在按钮内显示图标，只需要添加 md-icon-button 类就可以了。您还可以将其与 md-raised 类结合使用。
site/app/pages/components/button/index.html,Icon
site/app/pages/components/button/index.html,FAB 按钮
site/app/pages/components/button/index.html,FAB 按钮代表应用程序中的主要动作，用于升级动作。FAB 按钮可以是常规大小或小型，默认情况下带有强调色。这种类型的按钮只能有图标，因此应与 md-icon 一起使用。
site/app/pages/components/button/index.html,每屏最多只使用一个 FAB 按钮，并且仅在按钮的目的是触发屏幕的主要操作时才使用。否则，请使用 <code>md-icon-button</code>。
site/app/pages/components/button/index.html,FAB
site/app/pages/components/button/index.html,链接 vs 按钮
site/app/pages/components/button/index.html,默认情况下，所有按钮都会输出一个<code>button</code>标签。 如果要将其更改为 <code>a</code>标记，只需为其指定 href 属性：
site/app/pages/components/button/index.html,和 jinge-router 无缝整合
site/app/pages/components/button/index.html,"按钮可以默认和 jinge-router 整合。可以把 md-button 当 router-link 一样使用，为其指定 to, params, active, target 等属性。"
site/app/pages/components/button/index.html,UI Router Buttons
site/app/pages/components/button/index.html,按钮
site/app/pages/components/card/api.js,名称
site/app/pages/components/card/api.js,描述
site/app/pages/components/card/api.js,默认值
site/app/pages/components/card/api.js,卡片在鼠标悬停时启用阴影（elevation）效果
site/app/pages/components/card/api.js,操作按钮的对齐方式
site/app/pages/components/card/api.js,使用 inset 类型的边框
site/app/pages/components/card/api.js,自动调整大小或裁剪图像。可选比例包括：1:1、1/1、4:3、4/3、16:9 或 16/9。
site/app/pages/components/card/api.js,指定使用中等大小的媒介。仅在 md-card-header 内部起作用。
site/app/pages/components/card/api.js,指定使用大尺寸的媒介。仅在 md-card-header 内部起作用。
site/app/pages/components/card/api.js,根据图像应用自动计算出来的渐变背景。此选项通过提取图像上的明暗度来应用背景颜色，从而增加了文本的清晰度。如果图像较暗，则文本的背景会更亮。如果不是很暗，则背景会更暗。
site/app/pages/components/card/api.js,以与 textScrim 相同的计算逻辑应用纯色背景。
site/app/pages/components/card/index.html,卡片可能包含照片，文字和超链接。它们可能会显示包含大小可变的元素的内容，例如带有可变长度标题的照片。
site/app/pages/components/card/index.html,卡片被拆分成了非常细的子组件。卡片的每个部分都是一个组件。可以按照示例的相同逻辑以任意顺序组合它们。
site/app/pages/components/card/index.html,常规卡片
site/app/pages/components/card/index.html,最简单的卡片由卡片头（header）、内容区（content area）和动作按钮（action buttons）构成，依次对应组件 <code>md-card-header</code>、<code>md-card-content</code> 和 <code>md-card-actions</code>。卡片头可以包含标题和副标题，依次通过类 <code>.md-title</code> 和 <code>.md-subhead</code> 指定。内容区可以包含各种文本和图片。动作按钮通常包含 <code>md-button</code> 组件。
site/app/pages/components/card/index.html,如果想在用户将鼠标悬停在卡片上时添加阴影（elevation），请添加 <code>withHover</code>属性。还可以添加波纹效果，只需要将 <code>md-card</code> 的包裹在 <code>md-ripple</code> 组件里。
site/app/pages/components/card/index.html,带图片的卡片
site/app/pages/components/card/index.html,为了给卡片增添视觉吸引力，可以在 <code>md-header</code> 标签内添加包含有图片（<code>img</code> 标签）的 <code>md-card-media</code> 组件。使用属性 <code>md-medium</code> 和 <code>md-big</code> 可以将图像大小增加到中等或大尺寸。
site/app/pages/components/card/index.html,尽管对于纯文本标题不是必需的，但是当使用 <code>md-card-media</code>时，标题和副标题应包裹在 <code>md-card-header-text</code> 组件周围。
site/app/pages/components/card/index.html,对于侧面带有操作图标按钮的无文本卡片，请将卡片内容包裹在 <code>md-card-media-actions</code> 组件内。
site/app/pages/components/card/index.html,如果要使图像充满整个卡片区域，请将卡片内容包装在 <code>md-card-media-cover</code> 组件内。它的基本结构包括以下组件：
site/app/pages/components/card/index.html,<code>md-card-media</code>，用于展示图片。图片的缩放比例可以通过 <code>md-card-media</code> 组件的 <code>md-ratio</code> 属性控制。
site/app/pages/components/card/index.html,<code>md-card-area</code>，用于有卡片头（<code>md-header</code>）和动作（<code>md-card-actions</code>）的情况。
site/app/pages/components/card/index.html,如果背景图片和标题之间的对比度不足，则后者将无法清晰辨认。为了解决这个问题，请使用 <code>md-card-media-cover</code>的属性 <code>solid</code> 或 <code>textScrim</code>。
site/app/pages/components/card/index.html,不同底色的卡片
site/app/pages/components/card/index.html,为卡片添加 <code>.md-primary</code> 或 <code>.md-accent</code> 类可以指定卡片底色。
site/app/pages/components/card/index.html,可展开的卡片
site/app/pages/components/card/index.html,为避免卡内信息过多或使卡片的高度不超过最大高度，可以将补充信息隐藏在可扩展区域内。
site/app/pages/components/card/index.html,使用  <code>md-card-expand</code> 组件可以实现可展开卡片，同时需要搭配 <code>md-card-expand-content</code> 用于展示内容，以及 <code>md-card-action</code> 用于提供一个触发展开动作的 <code>md-card-expand-trigger</code> 组件。
site/app/pages/components/card/index.html,不同布局的卡片
site/app/pages/components/card/index.html,可以通过许多不同的方式组合这些和其他组件。比如下面的例子：
site/app/pages/components/card/index.html,卡片
site/app/pages/components/checkbox/api.js,名称
site/app/pages/components/checkbox/api.js,描述
site/app/pages/components/checkbox/api.js,默认值
site/app/pages/components/checkbox/api.js,多选框的值
site/app/pages/components/checkbox/api.js,选中状态下的值
site/app/pages/components/checkbox/api.js,未选中状态下的值
site/app/pages/components/checkbox/api.js,多选框的唯一标识
site/app/pages/components/checkbox/api.js,参数
site/app/pages/components/checkbox/api.js,多选框的值发生变化时触发
site/app/pages/components/checkbox/examples/array-checkbox.html,描述
site/app/pages/components/checkbox/examples/array-checkbox.html,示例
site/app/pages/components/checkbox/examples/array-checkbox.html,值
site/app/pages/components/checkbox/examples/array-checkbox.html,简单字符串数组
site/app/pages/components/checkbox/examples/array-checkbox.html,请选择城市：
site/app/pages/components/checkbox/examples/array-checkbox.html,Object 数组
site/app/pages/components/checkbox/examples/array-checkbox.html,请选择用户：
site/app/pages/components/checkbox/examples/array-checkbox.js,小葛
site/app/pages/components/checkbox/examples/array-checkbox.js,小明
site/app/pages/components/checkbox/examples/array-checkbox.js,小王
site/app/pages/components/checkbox/examples/single-checkbox.html,描述
site/app/pages/components/checkbox/examples/single-checkbox.html,示例
site/app/pages/components/checkbox/examples/single-checkbox.html,值
site/app/pages/components/checkbox/examples/single-checkbox.html,无任何属性的最简单选择框
site/app/pages/components/checkbox/examples/single-checkbox.html,标签
site/app/pages/components/checkbox/examples/single-checkbox.html,(无)
site/app/pages/components/checkbox/examples/single-checkbox.html,传递简单的布尔值
site/app/pages/components/checkbox/examples/single-checkbox.html,传递简单的字符串值
site/app/pages/components/checkbox/examples/single-checkbox.html,我已阅读并同意协议
site/app/pages/components/checkbox/examples/single-checkbox.html,传递 Object 值
site/app/pages/components/checkbox/examples/single-checkbox.html,禁用状态
site/app/pages/components/checkbox/index.html,多选框
site/app/pages/components/checkbox/index.html,多选框有两种使用模式，单一模式（Single）和数组（Array）模式。
site/app/pages/components/checkbox/index.html,单一模式下多选框的 value 是一个单一的值，该多选框被点击切换时，其 value 会在 trueValue 和 falseValue 这两个单一值之间切换，并通过 change 事件向外传递切换后的值。
site/app/pages/components/checkbox/index.html,数组模式下多选框的 value 是数组，需要指定 trueValue 但不需要指定 falseValue。该多选框被点击时，会向 value 指定的数组里添加或删除 trueValue 指定的元素。需要注意这种模式下，value 指定的数组，会被直接修改，并通过 change 事件向外传递修改后的数组。
site/app/pages/components/checkbox/index.html,浏览器原生 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> 标签上可以使用的属性，比如 <strong>name</strong> 和 <strong>required</strong> 等，也可以被应用到 <code>md-checkbox</code> 组件上。
site/app/pages/components/chips/api.js,名称
site/app/pages/components/chips/api.js,描述
site/app/pages/components/chips/api.js,默认值
site/app/pages/components/chips/api.js,启用/禁用纸片上的点击动作。
site/app/pages/components/chips/api.js,创建一个可以执行删除操作的纸片。
site/app/pages/components/chips/api.js,指定是否禁用纸片（包括点击和删除）。
site/app/pages/components/chips/api.js,参数
site/app/pages/components/chips/api.js,鼠标单击删除图标后触发，仅在 deletable 属性为 true 时才有效。
site/app/pages/components/chips/api.js,指定全部的纸片。除非您指定自定义模板，否则必须是字符串数组。
site/app/pages/components/chips/api.js,唯一标识，如果为 null，将自动创建。
site/app/pages/components/chips/api.js,输入框的类型
site/app/pages/components/chips/api.js,输入框的占位符，可用于向用户显示将插入哪种数据类型。
site/app/pages/components/chips/api.js,创建一个不可编辑的纸片集，可以用在显示详细信息的页面。
site/app/pages/components/chips/api.js,当纸片集的数量超过限定时，不允许再创建纸片。
site/app/pages/components/chips/api.js,更改输入值时始终检查纸片是否重复，或者仅在插入时检查纸片是否重复
site/app/pages/components/chips/api.js,纸片集发生变化（增删）时触发。
site/app/pages/components/chips/api.js,鼠标单击纸片的删除图标后触发。
site/app/pages/components/chips/api.js,鼠标点击纸片时触发。
site/app/pages/components/chips/api.js,插入纸片后触发
site/app/pages/components/chips/api.js,新插入的 chip
site/app/pages/components/chips/index.html,纸片以小块的形式表示复杂的实体，例如触点。它们可以用作用户创建任意项目（例如类别或标签）的方式。
site/app/pages/components/chips/index.html,独立纸片
site/app/pages/components/chips/index.html,一个纸片可以独立使用，而无需与其它纸片组合。它可以像徽章或应用程序中的实体类别一样使用。同时可以指定纸片是否可以删除和点击：
site/app/pages/components/chips/index.html,可编辑的纸片集
site/app/pages/components/chips/index.html,有时我们需要在屏幕上编辑项目集，例如，在编辑标签时，用户可能需要删除/添加标签。在这种情况下，您可以使用可编辑的纸片集：
site/app/pages/components/chips/index.html,只读模式
site/app/pages/components/chips/index.html,对于一个具有标签的实体，可能需要将这些标签显示在同一行中，但不允许用户对其进行编辑。这种情况下可以使用带有静态选项的 <code>md-chips</code> 组件来实现：
site/app/pages/components/chips/index.html,自定义模板
site/app/pages/components/chips/index.html,有时需要显示有关纸片的丰富信息，希望为纸片本身可以支持自定义 HTML 结构。可以通过指定自定义的 slot 来实现：
site/app/pages/components/chips/index.html,重复检测
site/app/pages/components/chips/index.html,如果待插入的新纸片和现有纸片有重复，则无法插入。可以自定义重复纸片的反馈样式：
site/app/pages/components/chips/index.html,多种颜色
site/app/pages/components/chips/index.html,可以使用 <code>md-primary</code> 或其它方式赋予纸片不同颜色：
site/app/pages/components/chips/index.html,纸片
site/app/pages/components/content/api.js,名称
site/app/pages/components/content/api.js,描述
site/app/pages/components/content/api.js,默认值
site/app/pages/components/content/api.js,渲染的 HTML 标签，用于创建不是默认的 div 标签。
site/app/pages/components/content/index.html,包含任意信息的内容容器在 Material Design 规范中称为材料或材料片。
site/app/pages/components/content/index.html,内容框
site/app/pages/components/datepicker/api.js,名称
site/app/pages/components/datepicker/api.js,描述
site/app/pages/components/datepicker/api.js,默认值
site/app/pages/components/datepicker/api.js,绑定所选日期的值
site/app/pages/components/datepicker/api.js,禁用日期。必须是接受4个参数（年，月，日，星期几）的函数。
site/app/pages/components/datepicker/api.js,禁用焦点事件，仅在用户单击图标时打开。
site/app/pages/components/datepicker/api.js,选择日期而不进行确认，然后立即关闭对话框。
site/app/pages/components/datepicker/api.js,通过将输入类型更改为文本来覆盖原生的日期选择器。
site/app/pages/components/datepicker/api.js,防反跳纯文本到日期对象的转换。如果您的用户输入速度较慢，则设置为较长的时间；如果用户的输入速度非常快，则设置为较短的时间。
site/app/pages/components/datepicker/api.js,参数
site/app/pages/components/datepicker/api.js,选择/单击日期选择器日期时触发
site/app/pages/components/datepicker/api.js,单击确认按钮时触发
site/app/pages/components/datepicker/api.js,当日期选择器对话框打开时触发
site/app/pages/components/datepicker/api.js,当日期选择器对话框关闭时触发
site/app/pages/components/datepicker/examples/basic.html,请选择日期
site/app/pages/components/datepicker/examples/basic.html,选择日期
site/app/pages/components/datepicker/index.html,日期选择器通过弹出一个对话窗口，让用户从预定日期集中选择单个日期。该组件可以禁用日期，并且非常易于使用。
site/app/pages/components/datepicker/index.html,简单选择器
site/app/pages/components/datepicker/index.html,焦点时不自动打开
site/app/pages/components/datepicker/index.html,默认情况下，日期选择器会在输入框获取焦点时自动打开。这将使得用户无法手动输入日期。您可以禁用此行为：
site/app/pages/components/datepicker/index.html,立即选中模式
site/app/pages/components/datepicker/index.html,选择日期后，可以使“日期选择器”对话框立即关闭。该日期将立即被选择，而无需任何其他确认或用户操作：
site/app/pages/components/datepicker/index.html,禁用部分日期
site/app/pages/components/datepicker/index.html,有时您可能需要禁用某些日期的选择。下面这个例子是只想让用户选择工作日的示例：
site/app/pages/components/datepicker/index.html,日期选择器
site/app/pages/components/dialog/api.js,名称
site/app/pages/components/dialog/api.js,描述
site/app/pages/components/dialog/api.js,默认值
site/app/pages/components/dialog/api.js,控制对话框的打开和关闭
site/app/pages/components/dialog/api.js,是否启用叠加的灰色蒙层
site/app/pages/components/dialog/api.js,默认情况下，按 esc 时对话框将关闭。设置为 false 可取消此行为。
site/app/pages/components/dialog/api.js,默认情况下，单击外部时该对话框将关闭。设置为 false 可取消此行为。
site/app/pages/components/dialog/api.js,控制该对话框将在移动屏幕上是否会变为全屏。
site/app/pages/components/dialog/api.js,参数
site/app/pages/components/dialog/api.js,对话框打开时触发
site/app/pages/components/dialog/api.js,对话框关闭时触发
site/app/pages/components/dialog/api.js,在叠加层外点击时触发
site/app/pages/components/dialog/api.js,通知对话框的标题
site/app/pages/components/dialog/api.js,通知对话框的内容。支持 html。
site/app/pages/components/dialog/api.js,确认按钮的文案
site/app/pages/components/dialog/api.js,确认
site/app/pages/components/dialog/api.js,确认对话框的标题
site/app/pages/components/dialog/api.js,确认对话框的内容。支持 html。
site/app/pages/components/dialog/api.js,取消按钮的文案
site/app/pages/components/dialog/api.js,取消
site/app/pages/components/dialog/api.js,确认按钮是否处于加载状态。当该参数为 true 时，确认按钮会展示 md-spinner，并处于 disabled 状态。
site/app/pages/components/dialog/api.js,点击确认按钮时触发
site/app/pages/components/dialog/api.js,点击取消按钮时触发
site/app/pages/components/dialog/api.js,输入框的默认值
site/app/pages/components/dialog/api.js,输入框是否必须填写
site/app/pages/components/dialog/api.js,可选参数，指定输入框的最大允许字符数
site/app/pages/components/dialog/api.js,输入框的占位提示信息
site/app/pages/components/dialog/api.js,对话框的标题
site/app/pages/components/dialog/examples/alert.html,您的文章已被删除。
site/app/pages/components/dialog/examples/alert.html,漂亮！
site/app/pages/components/dialog/examples/alert.html,提交成功！
site/app/pages/components/dialog/examples/alert.html,您的文章 <strong>你好世界</strong> 已经创建成功！
site/app/pages/components/dialog/examples/confirm.html,确认要使用谷歌的定位服务？
site/app/pages/components/dialog/examples/confirm.html,使用谷歌定位服务意味着，应用在被使用或处于后台时，都会向谷歌发送<strong>匿名</strong>位置数据。
site/app/pages/components/dialog/examples/confirm.html,同意
site/app/pages/components/dialog/examples/confirm.html,拒绝
site/app/pages/components/dialog/examples/prompt.html,请输入您的名字：
site/app/pages/components/dialog/examples/prompt.js,请输入您的名字：
site/app/pages/components/dialog/examples/prompt.js,名字
site/app/pages/components/dialog/examples/prompt.js,名字必须以字符 a 打头！
site/app/pages/components/dialog/examples/prompt.js,你好，${name}
site/app/pages/components/dialog/index.html,对话框用于通知用户有关特定任务的信息，并且可能包含关键信息，需要做出决定或涉及多个任务。您可以在其中包含选项卡，所有表单组件等等。
site/app/pages/components/dialog/index.html,对话框包含了一组模拟浏览器原生对话框的预设对话框，例如通知（alert）、确认（confirm）和提示输入（prompt）。
site/app/pages/components/dialog/index.html,对话框
site/app/pages/components/dialog/index.html,对话框组件内部可以包含任何 HTML 内容，用于创建丰富的对话框内容。
site/app/pages/components/dialog/index.html,提示对话框
site/app/pages/components/dialog/index.html,可以通过在 html 模板里使用 <code>md-dialog-alert</code> 组件，也可以通过在 js 代码中直接调用 <code>DialogAlert</code> 组件的静态函数 <code>show</code> 来触发。
site/app/pages/components/dialog/index.html,<code>DialogAlert.show</code> 函数第一个参数为必须的 Object 类型的 options，该 options 可指定的属性和 <code>md-dialog-alert</code> 组件的属性一致。
site/app/pages/components/dialog/index.html,该函数接收的第二个参数是可选的关闭对话框后的回调函数。如果该回调函数返回了 <code>false</code> 则会阻止对话框的关闭。
site/app/pages/components/dialog/index.html,确认对话框
site/app/pages/components/dialog/index.html,展示确认对话框，可以通过在 html 模板里使用 <code>md-dialog-confirm</code> 组件，也可以通过在 js 代码中直接调用 <code>DialogConfirm</code> 组件的静态函数 <code>show</code> 来触发。
site/app/pages/components/dialog/index.html,<code>DialogConfirm.show</code> 函数第一个参数为必须的 Object 类型的 options，该 options 里的可指定的属性和 <code>md-dialog-confirm</code> 组件的属性一致。
site/app/pages/components/dialog/index.html,该函数接收的可选的第二个参数和第三个参数依次是确认和取消的回调，如果回调函数返回了 <code>false</code> 则会阻止对话框的关闭。
site/app/pages/components/dialog/index.html,在实际业务使用时，有一种常见情况是，在 confirm 回调中要调用服务器的 api 接口更新，api 请求成功后，才关闭对话框（如果失败，则允许用户重试），api 请求过程中 Confirm 按钮不能点击且有 spinner 状态。
site/app/pages/components/dialog/index.html,针对这种情况，confirmCallback 允许返回 `false` 来阻止对话框关闭，还允许直接返回一个 Promise 对象。对话框会等待该 Promise，直到其 resolve 返回的数据不是 `false` 才关闭对话框。
site/app/pages/components/dialog/index.html,输入对话框
site/app/pages/components/dialog/index.html,输入对话框和确认对话框类似，可以通过在 html 模板里使用 <code>md-dialog-prompt</code> 组件，也可以通过在 js 代码中直接调用 <code>DialogPrompt</code> 组件的静态函数 <code>show</code> 来触发。
site/app/pages/components/dialog/index.html,<code>DialogPrompt.show</code> 函数和 <code>DialogConfirm.show</code> 的参数一致，但有一个区别是：confirmCallback 如果返回字符串，会认为是对输入值的错误提示；如果返回 Promise，对于 reject 的数据或 resolve 的字符串 也会认为是错误提示。
site/app/pages/components/divider/api.js,名称
site/app/pages/components/divider/api.js,描述
site/app/pages/components/divider/api.js,创建一个插入分隔符，通常用于分隔相关内容。
site/app/pages/components/divider/index.html,分隔线是一个轻量级的细法则，用于将列表和页面布局中的内容分组，并有助于将页面内容和层次结构组织到各个图块中。
site/app/pages/components/divider/index.html,分隔符可用于列表中并分隔内容。它们非常适合导航面板和菜单。
site/app/pages/components/divider/index.html,分隔线
site/app/pages/components/drawer/api.js,名称
site/app/pages/components/drawer/api.js,描述
site/app/pages/components/drawer/api.js,默认值
site/app/pages/components/drawer/api.js,将抽屉的打开设置为从侧面推送模式，会挤压内容。
site/app/pages/components/drawer/api.js,控制抽屉的打开和关闭
site/app/pages/components/drawer/api.js,将 position:fixed 应用于抽屉。可用作应用程序的主抽屉（类似于本文档）。
site/app/pages/components/drawer/api.js,将抽屉放置在屏幕的右侧。
site/app/pages/components/drawer/api.js,参数
site/app/pages/components/drawer/api.js,抽屉打开时触发
site/app/pages/components/drawer/api.js,抽屉关闭时触发
site/app/pages/components/drawer/index.html,导航抽屉从左侧或右侧滑入，并包含应用程序的导航目标。尽管可以接受任何类型的内容，但通常与内部列表一起使用。
site/app/pages/components/drawer/index.html,覆盖在上方
site/app/pages/components/drawer/index.html,从侧边推出
site/app/pages/components/drawer/index.html,抽屉
site/app/pages/components/empty/api.js,名称
site/app/pages/components/empty/api.js,描述
site/app/pages/components/empty/api.js,默认值
site/app/pages/components/empty/api.js,空状态的标签，用作标题。
site/app/pages/components/empty/api.js,空状态的描述。
site/app/pages/components/empty/api.js,使空状态变圆，并具有漂亮的背景颜色。
site/app/pages/components/empty/api.js,圆角的宽度/高度大小。仅适用于 <code>rounded</code>。
site/app/pages/components/empty/examples/basic.html,创建第一个项目
site/app/pages/components/empty/examples/basic.html,创建你的第一个项目
site/app/pages/components/empty/examples/basic.html,创建项目后，你就可以上传设计稿并和他人协作
site/app/pages/components/empty/index.html,空状态的示例是不包含任何项目的列表，或者不显示任何结果的搜索。尽管这些状态并不常见，但应设计为防止用户混淆。
site/app/pages/components/empty/index.html,最基本的空白状态显示非交互式图像和文本标语。 为此，您可以使用图标，标题和空状态描述。 空状态默认提供了不错的设计，但是您始终可以在 <code>md-empty-state</code> 之上创建自己的设计。
site/app/pages/components/empty/index.html,空状态可以是基本状态或圆形状态。仅对台式机建议使用四舍五入的变体，因为它的大小是固定的，并且无法响应。
site/app/pages/components/empty/index.html,空状态
site/app/pages/components/empty/index.html,可以在任何屏幕尺寸上使用默认的空状态。您可以将设计与图标，标签和说明结合使用，因为这些都是可选的。
site/app/pages/components/empty/index.html,圆角的空状态以清新的外观和漂亮的背景色来引起用户的注意。
site/app/pages/components/empty/index.html,还可以将两种布局与原色或强调色结合使用，以匹配您的主题。
site/app/pages/components/empty/index.html,空提示
site/app/pages/components/file/api.js,名称
site/app/pages/components/file/api.js,描述
site/app/pages/components/file/api.js,参数
site/app/pages/components/file/api.js,每次选择文件时触发，传递 FileList 参数。
site/app/pages/components/file/index.html,文件选择组件允许用户选择一个或多个文件。可以像普通输入文件一样过滤文件类型，或选择多个文件。
site/app/pages/components/file/index.html,<code>md-file</code> 组件可以像 <code>md-input</code> 组件一样使用。即，可以使用包括 <strong>placeholder</strong> 和 <strong>required</strong> 以及 <strong>disabled</strong> 等属性。
site/app/pages/components/file/index.html,文件选择
site/app/pages/components/file/index.html,浏览器原生 <code>&lt;input type=&quot;file&quot;&gt;</code> 支持的各种属性，比如 <strong>multiple</strong> 和 <strong>accept</strong> 等，都可以使用到 <code>md-file</code> 上。
site/app/pages/components/highlight/api.js,名称
site/app/pages/components/highlight/api.js,描述
site/app/pages/components/highlight/api.js,默认值
site/app/pages/components/highlight/api.js,待进行关键字搜索的文本
site/app/pages/components/highlight/api.js,待查询的高亮关键字
site/app/pages/components/highlight/api.js,搜索算法忽略大小写
site/app/pages/components/highlight/api.js,指定使用哪种算法进行搜索，默认使用模糊查询（fuzzysearch）
site/app/pages/components/highlight/api.js,使用模糊查询（fuzzysearch）算法来搜索关键字。
site/app/pages/components/highlight/api.js,使用包含子串（includes）算法来搜索关键字。
site/app/pages/components/highlight/api.js,使用以子串打头（starts）算法来搜索关键字。
site/app/pages/components/highlight/index.html,文本高亮
site/app/pages/components/highlight/index.html,文本高亮组件用于在浏览器端进行字符串关键字搜索并以高亮匹配字符的形式展示结果。搜索算法是在浏览器中执行的，但通常情况下，都应该尽可能使用后端接口来实现字符串的关键字搜索。
site/app/pages/components/highlight/index.html,"文本高亮组件支持三种查询算法，包括 <a href=""https://en.wikipedia.org/wiki/roximate_string_matching"" target=""_blank"">fuzzy</a>、includes 和 starts，依次代表模糊匹配、包含子串匹配和以子串打头匹配。默认情况下使用模糊匹配。"
site/app/pages/components/icon/api.js,名称
site/app/pages/components/icon/api.js,描述
site/app/pages/components/icon/api.js,默认值
site/app/pages/components/icon/api.js,图标大小，可以指定为数字，也可以指定为 css 字符串值。默认大小为当前字号。
site/app/pages/components/icon/api.js,指定需要下载并渲染的远程 svg 资源路径。
site/app/pages/components/icon/api.js,当使用 src 指定远程资源时，可以通过 cache 参数指定是否缓存该资源。
site/app/pages/components/icon/api.js,参数
site/app/pages/components/icon/api.js,当 src 属性指定的远程 svg 资源被加载结束时触发。如果加载出错，则会将错误信息做为参数传递。
site/app/pages/components/icon/examples/material-icons.html,不同主题的图标：
site/app/pages/components/icon/index.html,图标通过相对抽象的几何形状来在视觉上表达信息，包括核心思想、功能或主题等等。
site/app/pages/components/icon/index.html,Material Design 的图标包含 5 种主题，每种主题下都有超过 1000 个图标，共计超过 5000 个图标。所有图标在 Jinge Material 中都可以使用，并且只会按需加载。图标资源位于 <code>dist/icons/</code> 目录。
site/app/pages/components/icon/index.html,使用 Material 图标
site/app/pages/components/icon/index.html,"通过 <code>md-icon-{THEME}-{ICON_ID}</code> 这个格式的组件别名可以使用 Material 官方的全部图标。其中，<code>{THEME}</code> 请替换为实际需要的主题。可用的主题包括 <code>baseline</code>、<code>outline</code>、<code>round</code>、<code>sharp</code> 和 <code>twotone</code>，依次对应 Material Desgin 官网上的 Filled, Outlined, Rounded, Sharp, Two-Tone 主题。同时，<code>{ICON_ID}</code> 请替换为实际的图标的 id，比如 <code>home</code>, <code>3d_rotation</code> 等，更多的图标 id 请在使用时直接参考 <a href=""https://material.io/tools/icons"" target=""_blank"">Material Desgin Icons</a>  官网。"
site/app/pages/components/icon/index.html,通常情况下，一个项目只会使用同一个主题的图标。因此，还可以直接使用 <code>md-icon-{ICON_ID}</code> 这个格式的组件别名来引用默认主题的图标组件。默认主题为 <code>baseline</code>，但可以在构建工具（比如 webpack）的配置中指定其它主题为默认主题。
site/app/pages/components/icon/index.html,使用 Icon Font 图标
site/app/pages/components/icon/index.html,"直接使用 <code>md-icon</code> 组件并搭配 <code>class</code> 属性，可以使用 Icon Font 图标库，比如 <a href=""http://fontawesome.io/"" target=""_blank"">Font Awesome</a>。但请注意，你需要自己引入相应的 Web Font 资源。参看下面的示例："
site/app/pages/components/icon/index.html,加载 SVG
site/app/pages/components/icon/index.html,如果给 <code>md-icon</code> 组件指定 <code>src</code> 属性，组件会使用 ajax 来加载该指定的远程图片，加载完后渲染到组件内部。
site/app/pages/components/icon/index.html,图标
site/app/pages/components/input/api.js,名称
site/app/pages/components/input/api.js,描述
site/app/pages/components/input/api.js,默认值
site/app/pages/components/input/api.js,使用内联标签，当输入获得焦点时，标签将消失。
site/app/pages/components/input/api.js,启用字符计数器，仅适用于 input 和 textarea 等有 maxlength 属性的组件。
site/app/pages/components/input/api.js,在输入的右侧添加一个清除按钮。
site/app/pages/components/input/api.js,在输入的右侧添加一个切换按钮以显示/隐藏密码。仅适用于具有密码类型的 input 组件。
site/app/pages/components/input/api.js,参数
site/app/pages/components/input/api.js,鼠标单击清除图标后触发。仅在 clearable 为 true 时才有效。
site/app/pages/components/input/api.js,绑定到输入框的值
site/app/pages/components/input/api.js,传递给原生 input 标签的 type 属性
site/app/pages/components/input/api.js,占位提示信息
site/app/pages/components/input/api.js,传递给原生 input 标签的 required 属性
site/app/pages/components/input/api.js,唯一标识
site/app/pages/components/input/api.js,传递给原生 input 标签的 name 属性
site/app/pages/components/input/api.js,禁用输入框
site/app/pages/components/input/api.js,启用该字段的计数器并设置最大长度
site/app/pages/components/input/api.js,启用该字段的计数器。当您只需要一个计数器而不设置最大长度时，这很有用。设置最大长度后，如果不想显示计数器，请将此属性设置为 false
site/app/pages/components/input/api.js,文本发生变化时的事件，等价于原生 input 标签的 input 事件。
site/app/pages/components/input/api.js,绑定到文本框的值
site/app/pages/components/input/api.js,文本框随录入文本自动增加高度
site/app/pages/components/input/api.js,文本发生变化时的事件，等价于原生 textarea 标签的 input 事件。
site/app/pages/components/input/examples/text.html,初始值
site/app/pages/components/input/examples/text.html,初始值（只读）
site/app/pages/components/input/examples/text.html,请在此处输入！
site/app/pages/components/input/examples/text.html,这是一些辅助说明的文字
site/app/pages/components/input/examples/text.html,使用标签
site/app/pages/components/input/examples/text.html,可读性更高的占位信息
site/app/pages/components/input/examples/text.html,内联样式
site/app/pages/components/input/examples/text.html,输入数字
site/app/pages/components/input/examples/text.html,可换行长文本
site/app/pages/components/input/examples/text.html,随文本内容自动适应高度
site/app/pages/components/input/examples/text.html,禁用状态
site/app/pages/components/input/index.html,文本框允许用户通常在表单内部输入，编辑和选择文本。可以用在包括对话框和搜索等场景。
site/app/pages/components/input/index.html,典型的输入型组件都需要被包裹在表单项 <code>md-field</code> 组件里搭配使用，包括 <code>md-input</code>、<code>md-textarea</code> 和 <code>md-select</code>。
site/app/pages/components/input/index.html,文本输入
site/app/pages/components/input/index.html,表单项组件支持和原生 html5 相兼容的属性，并支持更多额外属性。
site/app/pages/components/input/index.html,可以在 <code>md-input</code> 和 <code>md-textarea</code> 上设置和原生标签一致的属性，例如：
site/app/pages/components/input/index.html,错误提示
site/app/pages/components/input/index.html,文本框可以添加验证状态以显示错误消息。
site/app/pages/components/input/index.html,字符计数
site/app/pages/components/input/index.html,可以在需要限制用户输入的地方使用字符计数器，例如新浪微博最多允许 140 个字符。
site/app/pages/components/input/index.html,图标
site/app/pages/components/input/index.html,可以为文本框添加图标来区分其内容代表的含义：
site/app/pages/components/input/index.html,内部动作
site/app/pages/components/input/index.html,输入框可以具有可清除的功能，以使用户更容易清除值。为了更好地使用密码，我们可以显示一个切换按钮来显示密码。这对于移动应用程序确实非常有用：
site/app/pages/components/input/index.html,前缀和后缀
site/app/pages/components/input/index.html,前缀和后缀可用于澄清单位或预先添加输入。前缀在文本字段中左对齐，而后缀右对齐。文本框可以同时具有前缀和后缀。
site/app/pages/components/input/index.html,任何原生 <code>input</code> 和 <code>textarea</code> 的属性，都可以被应用到 <code>md-input</code> 和 <code>md-textarea</code> 组件上。
site/app/pages/components/input/index.html,文本框
site/app/pages/components/list/api.js,名称
site/app/pages/components/list/api.js,描述
site/app/pages/components/list/api.js,默认值
site/app/pages/components/list/api.js,如果设置为 true，则一个列表最多只能有一个列表项展开。当展开另一个列表项时，原先展开的列表项将被折叠
site/app/pages/components/list/api.js,使用紧凑型布局
site/app/pages/components/list/api.js,双行列表可以更好地显示有关单个项目的其他信息
site/app/pages/components/list/api.js,三行列表适合显示项目的全部内容的预览
site/app/pages/components/list/api.js,启用可展开面板
site/app/pages/components/list/api.js,控制面板的展开和关闭
site/app/pages/components/list/index.html,列表用于将多个项目垂直连续展示，适合多个相似数据项目的展示。
site/app/pages/components/list/index.html,列表项可以具有一，二或三行内容，其中可以包含不同的信息。列表在移动和桌面 APP 上都可以适用。
site/app/pages/components/list/index.html,列表项可以具有交互事件，例如单击和鼠标按下事件。同时还可以和 jinge-router 无缝集成。
site/app/pages/components/list/index.html,列表
site/app/pages/components/list/index.html,单行列表对于导航元素（例如抽屉）确实非常有用。可以向其传递图标，文本和操作。它们的布局也很密集，可以在屏幕上容纳更多项目：
site/app/pages/components/list/index.html,双行列表可以更好地显示了有关单个项目的其他信息：
site/app/pages/components/list/index.html,三行列表非常适合显示项目的全部内容的预览。比如，适用于电子邮件列表和其他类似信息：
site/app/pages/components/list/index.html,交互响应
site/app/pages/components/list/index.html,列表项将根据给定的交互类型，渲染成不同的浏览器 html 标签。
site/app/pages/components/list/index.html,如果传递了下面列出的事件之一，则该列表项将被渲染成 <code>&lt;button&gt;</code>：
site/app/pages/components/list/index.html,如果指定了 <code>href</code> 或 <code>to</code> 属性，则该列表项将被渲染成 <code>&lt;a&gt;</code>：
site/app/pages/components/list/index.html,所有 <code>router-link</code> 组件的可用属性，都可以被使用到列表项上。
site/app/pages/components/list/index.html,列表接受控件作为主要切换动作。对改善表单布局非常有用：
site/app/pages/components/list/index.html,列表可以具有可展开面板以显示更多信息：
site/app/pages/components/menu/api.js,名称
site/app/pages/components/menu/api.js,描述
site/app/pages/components/menu/api.js,默认值
site/app/pages/components/menu/api.js,控制菜单的打开和关闭
site/app/pages/components/menu/api.js,如果此选项为 true，则在菜单外部发生任何单击事件后，菜单将关闭。
site/app/pages/components/menu/api.js,如果此选项为 true，则单击 <code>md-menu-item</code>后，菜单将关闭。仅当菜单具有以下事件之一时，此功能才有效：
site/app/pages/components/menu/api.js,设置菜单的位置。支持所有 popper.js 的参数。
site/app/pages/components/menu/api.js,设置自定义偏移量。支持数字，或 popper.js 的参数。默认情况下，将相对于触发器计算偏移量。
site/app/pages/components/menu/api.js,设置菜单的大小。请参见下面每种尺寸的详细说明。
site/app/pages/components/menu/api.js,设置小尺寸菜单（112px）
site/app/pages/components/menu/api.js,设置中等大小（168px）的菜单
site/app/pages/components/menu/api.js,设置大尺寸菜单（224px）
site/app/pages/components/menu/api.js,设置一个巨大的菜单（280px）
site/app/pages/components/menu/api.js,菜单大小自动适应内容
site/app/pages/components/menu/api.js,参数
site/app/pages/components/menu/api.js,菜单打开时触发
site/app/pages/components/menu/api.js,菜单关闭时触发
site/app/pages/components/menu/index.html,菜单用于弹出一组按钮或其他控件以进行交互。列表通常展示为一个选项列表，每行一个选项，但也可以显示更丰富的内容。
site/app/pages/components/menu/index.html,菜单的底层靠 <code>md-popover</code> 组件以及 <code>popper.js</code> 库驱动。
site/app/pages/components/menu/index.html,弹出位置
site/app/pages/components/menu/index.html,默认的弹位置是 <code>bottom-start</code>，支持所有 <code>popper.js</code> 的位置（placement）参数。
site/app/pages/components/menu/index.html,位移
site/app/pages/components/menu/index.html,"默认情况下，会自动计算菜单的弹出位移。可以通过设置 <code>offset=""0""</code> 来禁用位移，或指定自定义的位移值。"
site/app/pages/components/menu/index.html,大小
site/app/pages/components/menu/index.html,<code>md-menu</code> 可以指定 4 种大小之一，或指定为自动适应内容。
site/app/pages/components/menu/index.html,菜单最大宽度为 280px，如果需要更大的宽度，请使用 css 设置。
site/app/pages/components/menu/index.html,自动关闭
site/app/pages/components/menu/index.html,菜单可以指定为在单击或选择后自动关闭。
site/app/pages/components/menu/index.html,丰富的信息和对齐
site/app/pages/components/menu/index.html,可以动态切换菜单，还可以在 <code> md-menu-content</code> 中显示任意内容，例如此卡片示例：
site/app/pages/components/menu/index.html,菜单
site/app/pages/components/pagination/api.js,名称
site/app/pages/components/pagination/api.js,描述
site/app/pages/components/pagination/api.js,默认值
site/app/pages/components/pagination/api.js,数据总量。
site/app/pages/components/pagination/api.js,每页的数据量。
site/app/pages/components/pagination/api.js,是否启用每页数量选择器。指定为具体的数组，则使用自定义的选项；指定为 true 使用默认的选项。
site/app/pages/components/pagination/api.js,设置当前页号。页码从 1 开始计数。
site/app/pages/components/pagination/api.js,设置最大页码导航按钮数量。
site/app/pages/components/pagination/api.js,启用页码快速跳转功能
site/app/pages/components/pagination/api.js,展示数据总量的提示信息。
site/app/pages/components/pagination/api.js,禁用整个分页组件。
site/app/pages/components/pagination/api.js,指定正在加载的页码。如果该属性值大于 0，则会禁用整个分页组件，并在正在加载的页码按钮上展示 md-pinner。
site/app/pages/components/pagination/api.js,当计算出来的总页码数量小于等于 1 时，隐藏分页组件。
site/app/pages/components/pagination/api.js,参数
site/app/pages/components/pagination/api.js,当分页参数（包括当前页码和每页数据量）发生变化时触发。
site/app/pages/components/pagination/api.js,游标数组，如果最后一个元素为 null，则说明已经到最后一页。
site/app/pages/components/pagination/api.js,当总页码数量等于 1 时（游标数组仅有一个 null 元素），隐藏分页组件。
site/app/pages/components/pagination/api.js,当分页参数（包括当前游标和每页数据量）发生变化时触发。
site/app/pages/components/pagination/examples/disabled.html,禁用整个分页组件：
site/app/pages/components/pagination/examples/disabled.html,提示正在加载某页：
site/app/pages/components/pagination/examples/full.html,使用默认的每页个数选择器列表：
site/app/pages/components/pagination/examples/full.html,使用自定义的每页个数选择器列表：
site/app/pages/components/pagination/index.html,采用分页的形式分隔长列表，每次只加载一个页面。
site/app/pages/components/pagination/index.html,基础分页
site/app/pages/components/pagination/index.html,基础分页只包括页码按钮。
site/app/pages/components/pagination/index.html,完整分页
site/app/pages/components/pagination/index.html,完整分页包括页码按钮、每页个数选择、快速跳转页码以及展示数据总条数功能。每个功能都可以通过参数独立控制是否使用。
site/app/pages/components/pagination/index.html,禁用分页
site/app/pages/components/pagination/index.html,有两种情况需要禁用(Disabled)分页，某些需求下需要禁用整个分页，或当正在加载某一页的数据时提示用该页正在加载并且禁用分页以避免重复提交。后者是业务中最常见的情况。为此，提供了 <code>disabled</code> 和 <code>loadingPage</code> 两个参数。请参看<code>表格（Table）</code>组件的示例中，有一个完整的分页组件和表格展示搭配的例子。
site/app/pages/components/pagination/index.html,只支持[第一页/上一页/下一页]的轻量分页
site/app/pages/components/pagination/index.html,轻量分页组件用于不统计总页码，使用游标（cursor）来进行分页的情况。多用于数据量很大需要高效分页的情形，这类情况下会牺牲一定的用户体验来换取性能，比如无法直观看到总页码，也不能随意跳转到任意页码。
site/app/pages/components/pagination/index.html,分页
site/app/pages/components/popconfirm/api.js,名称
site/app/pages/components/popconfirm/api.js,描述
site/app/pages/components/popconfirm/api.js,默认值
site/app/pages/components/popconfirm/api.js,文字提示的内容
site/app/pages/components/popconfirm/api.js,补充说明的描述性文字
site/app/pages/components/popconfirm/api.js,如果指定该属性，会显示错误提示。
site/app/pages/components/popconfirm/api.js,点击确认按钮后是否隐藏气泡。
site/app/pages/components/popconfirm/api.js,是否进入正在确认的加载状态
site/app/pages/components/popconfirm/api.js,同 Popover 组件
site/app/pages/components/popconfirm/api.js,参数
site/app/pages/components/popconfirm/api.js,用户点击确认按钮
site/app/pages/components/popconfirm/api.js,用户点击取消按钮
site/app/pages/components/popconfirm/examples/simple.html,简单的 Popconfirm：
site/app/pages/components/popconfirm/examples/simple.html,删除
site/app/pages/components/popconfirm/examples/simple.html,您确认要删除 ${some.name} 吗？
site/app/pages/components/popconfirm/examples/simple.html,配合服务器端 API 接口：
site/app/pages/components/popconfirm/examples/simple.html,删除后不可撤销，请谨慎操作
site/app/pages/components/popconfirm/examples/simple.js,未命名
site/app/pages/components/popconfirm/examples/simple.js,删除成功！
site/app/pages/components/popconfirm/index.html,目标元素的操作需要用户进一步的确认时，在目标元素附近弹出浮层提示，询问用户。
site/app/pages/components/popconfirm/index.html,和 DialogConfirm 弹出的全屏居中模态对话框相比，交互形式更轻量。
site/app/pages/components/popconfirm/index.html,气泡确认框
site/app/pages/components/popconfirm/index.html,Popover 组件的所有 API 也可用于 Popconfirm 组件。但部分属性的默认值不同。
site/app/pages/components/popover/api.js,名称
site/app/pages/components/popover/api.js,描述
site/app/pages/components/popover/api.js,默认值
site/app/pages/components/popover/api.js,控制气泡卡片是否展示。外部父组件可通过此属性手动控制。
site/app/pages/components/popover/api.js,"气泡卡片的触发方式，包括 click, hover 和 none。如果指定为 none，代表气泡卡片不自动绑定触发元素，完全靠 active 属性控制。"
site/app/pages/components/popover/api.js,卡片在延迟一定的时间后显示，单位为毫秒。
site/app/pages/components/popover/api.js,卡片显示时的相对位置，参看 Popper.js 的 placement 概念。
site/app/pages/components/popover/api.js,卡片显示时的偏移量，参看 Popper.js 的 offset 概念。
site/app/pages/components/popover/api.js,附加在卡片的 DOM 上的 html class。
site/app/pages/components/popover/api.js,卡片显示和隐藏时的 css 动画。
site/app/pages/components/popover/api.js,点击卡片之外的其它区域时，是否隐藏卡片。
site/app/pages/components/popover/api.js,Popper.js 的更多自定义高级配置。
site/app/pages/components/popover/api.js,用于控制气泡里面顶部的标题样式。
site/app/pages/components/popover/api.js,控制气泡里面中间的内容样式。
site/app/pages/components/popover/api.js,控制气泡里面底部的按钮区域样式。
site/app/pages/components/popover/api.js,参数
site/app/pages/components/popover/api.js,气泡显示或隐藏时的事件
site/app/pages/components/popover/examples/simple.html,简单地使用内置 Trigger 触发气泡卡片展示和隐藏：
site/app/pages/components/popover/examples/simple.html,通过父组件里的参数控制气泡的显示和隐藏：
site/app/pages/components/popover/index.html,当目标元素有进一步的描述和相关操作时，可以收纳到卡片中，根据用户的操作行为进行展现。点击/鼠标移入元素，弹出气泡式的卡片浮层。
site/app/pages/components/popover/index.html,和 <code>Tooltip</code> 的区别是，用户可以对浮层上的元素进行操作，因此它可以承载更复杂的内容，比如链接或按钮等。
site/app/pages/components/popover/index.html,气泡卡片
site/app/pages/components/progress/api.js,名称
site/app/pages/components/progress/api.js,描述
site/app/pages/components/progress/api.js,默认值
site/app/pages/components/progress/api.js,设置进度条的模式。请参见下面每种模式的详细说明。
site/app/pages/components/progress/api.js,默认模式，与 <code>md-value</code> 属性一起使用。指定 0％ 到 100％ 之间的某个进度。
site/app/pages/components/progress/api.js,创建一个不指定具体进度，持续加载状态的进度条
site/app/pages/components/progress/api.js,创建用于提示正在查询的进度条。在检索大量内容时很有用。
site/app/pages/components/progress/api.js,创建带有缓冲区的进度条，常用于指示视频加载进度。
site/app/pages/components/progress/api.js,当前进度的值，支持 0 到 100 的数字。
site/app/pages/components/progress/api.js,当前缓冲量的值，支持 0 到 100 的数字。
site/app/pages/components/progress/index.html,进度条用于应用程序加载内容的视觉提示。
site/app/pages/components/progress/index.html,针对不同应用程序可能的需要，进度条提供提供了 4 种类型：确定，不确定，查询或缓冲区。
site/app/pages/components/progress/index.html,进度条
site/app/pages/components/progress/index.html,确定进度条用于指示已完成的百分比。
site/app/pages/components/progress/index.html,当无法确定当前已完成的进度，只是提示用户等待正在进行的操作，可以使用不确定进度条。
site/app/pages/components/progress/index.html,处理流媒体视频等媒体内容时，我们可以使用进度条在视频上显示缓冲进度指示器。
site/app/pages/components/progress/index.html,当搜索或过滤大量数据时，可以使用查询进度条，以告诉用户正在检索某些内容。
site/app/pages/components/radio/api.js,名称
site/app/pages/components/radio/api.js,描述
site/app/pages/components/radio/api.js,默认值
site/app/pages/components/radio/api.js,点击选中时通过 change 事件向外传递的值
site/app/pages/components/radio/api.js,是否为选中状态
site/app/pages/components/radio/api.js,唯一标识
site/app/pages/components/radio/api.js,用于标识分组的 name，会传递给原生 input，实现多个 radio 关联
site/app/pages/components/radio/api.js,参数
site/app/pages/components/radio/api.js,选中的值变化时触发
site/app/pages/components/radio/examples/simple-radios.html,描述
site/app/pages/components/radio/examples/simple-radios.html,示例
site/app/pages/components/radio/examples/simple-radios.html,值
site/app/pages/components/radio/examples/simple-radios.html,简单选择项
site/app/pages/components/radio/examples/simple-radios.html,字符串数组
site/app/pages/components/radio/examples/simple-radios.html,Object 数组
site/app/pages/components/radio/examples/simple-radios.js,小葛
site/app/pages/components/radio/examples/simple-radios.js,小明
site/app/pages/components/radio/examples/simple-radios.js,小王
site/app/pages/components/radio/index.html,单选按钮允许用户从一组选项中选择唯一一个选项。如果认为用户需要并排查看所有可用选项，请使用单选按钮进行独占选择。
site/app/pages/components/radio/index.html,单选项
site/app/pages/components/radio/index.html,浏览器原生 <code>&lt;input type=&quot;radio&quot;&gt;</code> 标签上可以使用的属性，比如 <strong>name</strong> 和 <strong>required</strong> 等，也可以被应用到 <code>md-radio</code> 组件上。
site/app/pages/components/select/api.js,名称
site/app/pages/components/select/api.js,描述
site/app/pages/components/select/api.js,默认值
site/app/pages/components/select/api.js,绑定到下拉选择组件的值
site/app/pages/components/select/api.js,占位提示信息
site/app/pages/components/select/api.js,指定是否必须选择一项
site/app/pages/components/select/api.js,唯一标识
site/app/pages/components/select/api.js,禁用下拉选择组件
site/app/pages/components/select/api.js,创建一个带有复选框的多重选择。需要搭配传递 <code>Array</code> 类型的 <code>value</code> 属性。
site/app/pages/components/select/api.js,使用紧凑型布局
site/app/pages/components/select/api.js,参数
site/app/pages/components/select/api.js,选项发生变化时触发
site/app/pages/components/select/api.js,下拉框打开时触发
site/app/pages/components/select/api.js,下拉框关闭时触发
site/app/pages/components/select/api.js,单个选择项的值。
site/app/pages/components/select/api.js,禁用单个选择项
site/app/pages/components/select/api.js,分组的标签
site/app/pages/components/select/api.js,禁用分组并阻止选择其中的所有选择项。
site/app/pages/components/select/index.html,下拉选择可用于在多个选项之间进行选择，可以选择一个或多个选项。组件显示当前状态和向下箭头。
site/app/pages/components/select/index.html,<code>md-select</code> 组件可兼容原生 <code>select</code> 标签的各种属性，包括 <code>required</code> 和 <code>multiple</code> 等。
site/app/pages/components/select/index.html,下拉选择
site/app/pages/components/select/index.html,<code>md-select</code> 需要和 <code>md-option</code> 组件搭配使用，后者提供可能的选择项，且必须指定 <code>value</code> 属性。同时，<code>md-select</code> 组件应该在 <code>md-field</code> 组件内使用。
site/app/pages/components/select/index.html,如果向 <code>md-select</code> 传递的 <code>value</code> 属性是数组，则代表使用多选功能。
site/app/pages/components/select/index.html,可以使用紧凑型布局，以便在屏幕上容纳更多项目：
site/app/pages/components/select/index.html,可以对选择项进行分组，以便于区分不同的数据集：
site/app/pages/components/select/index.html,可以禁用整个下拉选择组件，也可以禁用单个选择项，或禁用某个分组。通过指定 <code>disabled</code> 属性来实现：
site/app/pages/components/snackbar/api.js,名称
site/app/pages/components/snackbar/api.js,描述
site/app/pages/components/snackbar/api.js,默认值
site/app/pages/components/snackbar/api.js,控制消息提示的展示和关闭
site/app/pages/components/snackbar/api.js,设置自动关闭消息提示之前的持续时间（以毫秒为单位）。设置为 0 则不自动关闭，需要手动处理。
site/app/pages/components/snackbar/api.js,设置消息提示在屏幕底部的位置
site/app/pages/components/snackbar/api.js,设置消息提示位于中心位置
site/app/pages/components/snackbar/api.js,设置消息提示位于左侧位置
site/app/pages/components/snackbar/api.js,参数
site/app/pages/components/snackbar/api.js,消息提示打开时触发
site/app/pages/components/snackbar/api.js,消息提示关闭时触发
site/app/pages/components/snackbar/examples/regular.html,打开消息提示
site/app/pages/components/snackbar/examples/regular.html,连接超时。巴拉巴拉的错误提示信息...
site/app/pages/components/snackbar/examples/regular.html,确认
site/app/pages/components/snackbar/index.html,消息提示组件通过屏幕底部的消息提供有关操作的简短反馈。
site/app/pages/components/snackbar/index.html,它们可以在屏幕上具有自定义的持续时间，也可以是持续的。可以居中或左对齐。
site/app/pages/components/snackbar/index.html,在移动设备上，消息提示将占满整个宽度空间。
site/app/pages/components/snackbar/index.html,持续时间和位置
site/app/pages/components/snackbar/index.html,在 js 代码里调用
site/app/pages/components/snackbar/index.html,除了直接在 html 模板里使用 <code>md-snackbar</code> 组件外，也可以在 js 代码里直接通过调用 <code>Snackbar.show</code> 来展示消息。
site/app/pages/components/snackbar/index.html,消息提示
site/app/pages/components/spinner/api.js,名称
site/app/pages/components/spinner/api.js,描述
site/app/pages/components/spinner/api.js,默认值
site/app/pages/components/spinner/api.js,指示进度的值。当不指定该参数时，spinner 表现为旋转加载状态；当指定该参数时，spinner 表现为进度条。
site/app/pages/components/spinner/api.js,"图标大小，可以指定为数字，也可以指定为 css 字符串值，还可以指定为 ""small""/""normal""/""large"" 三者之一（依次对应 36px, 48px, 64px）"
site/app/pages/components/spinner/api.js,指定使用 primary 颜色。
site/app/pages/components/spinner/api.js,指定使用 secondary 颜色。
site/app/pages/components/spinner/api.js,当需要将 Spinner 和文本混合排版时，如果父元素没有使用 flex 布局，则需要使用 md-ajust-baseline 来调整 Baseline。
site/app/pages/components/spinner/examples/button.html,放在文字前面的 Spinner
site/app/pages/components/spinner/examples/button.html,提交
site/app/pages/components/spinner/examples/button.html,搜索
site/app/pages/components/spinner/examples/loading.html,"自动适配<span style=""font-size: 2em;"">文字大小<md-spinner class=""md-adjust-baseline""/></span>和<span style=""color: #2196f3;"">颜色<md-spinner class=""md-adjust-baseline""/></span>的 Spinner"
site/app/pages/components/spinner/index.html,该组件常用于指示正在加载、正在提交等状态，也可用于具体指示加载的进度。为了简化 API，通过是否指定 <code>value</code> 属性来决定 Spinner 属于哪个类型。
site/app/pages/components/spinner/index.html,指定 <code>value</code> 属性时，属于指示具体加载进度的 Spinner，<code>value</code> 属性为 0-100 的数字。
site/app/pages/components/spinner/index.html,"不指定 <code>value</code> 属性时，属于指示正在加载状态的 Spinner,Spinner 表现为一个旋转的加载动画。"
site/app/pages/components/spinner/index.html,指示正在加载状态的 Spinner
site/app/pages/components/spinner/index.html,指示具体的加载进度的 Spinner
site/app/pages/components/spinner/index.html,在按钮中使用 Spinner
site/app/pages/components/spinner/index.html,默认情况下，Spinner 的大小为 <code>1em</code>（即字号大小），颜色为 <code>currentColor</code>（即文字颜色）。在实际使用时，可以通过调整父元素的字号和颜色来改变 Spinner 的大小和颜色，也可以通过以下接口来调整：
site/app/pages/components/spinner/index.html,加载指示
site/app/pages/components/steppers/api.js,名称
site/app/pages/components/steppers/api.js,描述
site/app/pages/components/steppers/api.js,默认值
site/app/pages/components/steppers/api.js,指定当前激活的步骤，可以是数字索引，或某个步骤的 id。
site/app/pages/components/steppers/api.js,使用替代布局
site/app/pages/components/steppers/api.js,使用垂直布局，通常用于移动平台。
site/app/pages/components/steppers/api.js,使用线性工作流模式。
site/app/pages/components/steppers/api.js,自动计算步骤的高度，并在它们之间使用高度过渡。
site/app/pages/components/steppers/api.js,参数
site/app/pages/components/steppers/api.js,当前激活步骤发生变化时触发
site/app/pages/components/steppers/api.js,唯一标识，可用于和 activeStep 属性配合指定当前激活步骤
site/app/pages/components/steppers/api.js,步骤的标签文本
site/app/pages/components/steppers/api.js,步骤的描述文本。如果某个步骤是可选的，请使用此属性说明。
site/app/pages/components/steppers/api.js,错误消息。设置此属性后，步骤将自动变成错误状态。要清除错误，请将此属性设置为 null。
site/app/pages/components/steppers/api.js,将此属性设置为 true 可提示特定步骤已完成。
site/app/pages/components/steppers/api.js,使步骤可编辑或不可编辑。
site/app/pages/components/steppers/examples/horizontal.html,第一步
site/app/pages/components/steppers/examples/horizontal.html,第二步
site/app/pages/components/steppers/examples/horizontal.html,第三步
site/app/pages/components/steppers/index.html,步骤条通过一串顺序编号的步骤显示进度。它们也可以用于导航，并且有两种主要类型：水平或垂直。水平类型可以具有其他布局。
site/app/pages/components/steppers/index.html,默认情况下，各个步骤都是可编辑的，并且是可选的。
site/app/pages/components/steppers/index.html,水平步骤条
site/app/pages/components/steppers/index.html,当一个步骤的内容取决于较早的步骤时，水平步骤条是理想的选择。应该避免在水平步骤条中使用较长的步骤名。
site/app/pages/components/steppers/index.html,这是步骤条的默认类型。不建议将它用于移动设备：
site/app/pages/components/steppers/index.html,他们还可以使用其他布局来更加强调步骤标题：
site/app/pages/components/steppers/index.html,垂直步骤条
site/app/pages/components/steppers/index.html,垂直步骤条非常适合用于移动设备或插入对话框及卡片等应用程序的小区域。
site/app/pages/components/steppers/index.html,线性工作流
site/app/pages/components/steppers/index.html,默认情况下，步骤是可选的，这意味着您可以前进到最后一步，而无需先完成前面的其他步骤。但是有时我们会通过线性流程引导用户，所有步骤都很重要或连接在一起。线性步骤条要求用户完成前一个步骤才能继续进行下一个步骤：
site/app/pages/components/steppers/index.html,不可编辑
site/app/pages/components/steppers/index.html,默认情况下，步骤也是可编辑的。可以通过手动设置每个不可编辑的步骤来禁用此功能。通常适用于，当用户以后无法编辑某个步骤或步骤编辑对完成表单构成干扰时：
site/app/pages/components/steppers/index.html,步骤条
site/app/pages/components/subheader/index.html,子标题是用于描述列表或网格列表各部分的列表图块。
site/app/pages/components/subheader/index.html,子标题可以在列表，网格甚至选择中使用，并且通常与过滤或排序标准有关。它们非常适合导航面板和网格列表。
site/app/pages/components/subheader/index.html,子标题
site/app/pages/components/subheader/index.html,子标题组件没有可配置的属性。
site/app/pages/components/switch/examples/array-switch.html,描述
site/app/pages/components/switch/examples/array-switch.html,示例
site/app/pages/components/switch/examples/array-switch.html,值
site/app/pages/components/switch/examples/array-switch.html,简单字符串数组
site/app/pages/components/switch/examples/array-switch.html,城市开关：
site/app/pages/components/switch/examples/array-switch.html,Object 数组
site/app/pages/components/switch/examples/array-switch.html,用户开关：
site/app/pages/components/switch/examples/array-switch.js,小葛
site/app/pages/components/switch/examples/array-switch.js,小明
site/app/pages/components/switch/examples/array-switch.js,小王
site/app/pages/components/switch/examples/single-switch.html,描述
site/app/pages/components/switch/examples/single-switch.html,示例
site/app/pages/components/switch/examples/single-switch.html,值
site/app/pages/components/switch/examples/single-switch.html,无任何属性的最简单切换按钮
site/app/pages/components/switch/examples/single-switch.html,标签
site/app/pages/components/switch/examples/single-switch.html,(无)
site/app/pages/components/switch/examples/single-switch.html,传递简单的布尔值
site/app/pages/components/switch/examples/single-switch.html,传递简单的字符串值
site/app/pages/components/switch/examples/single-switch.html,自动更新
site/app/pages/components/switch/examples/single-switch.html,传递 Object 值
site/app/pages/components/switch/index.html,切换按钮可以理解成多选框的另一种展示方式，其核心逻辑和多选框完全一样。因此，切换按钮也分为单一模式和数组模式，且 API 接口和多选框完全一样。
site/app/pages/components/switch/index.html,切换按钮
site/app/pages/components/switch/index.html,单一模式的切换按钮，这种模式是最常见的使用模式。
site/app/pages/components/switch/index.html,数组模式的切换按钮，这种模式很少使用。典型的使用场景就是配置由个开关组成的开关分组。
site/app/pages/components/switch/index.html,和 <code>md-checkbox</code> 完全一样，请参看 <code>md-checkbox</code> 的 API 文档。
site/app/pages/components/table/api.js,名称
site/app/pages/components/table/api.js,描述
site/app/pages/components/table/api.js,默认值
site/app/pages/components/table/api.js,指定表格的数据。必须是数组，数组每个元素是一行数据。
site/app/pages/components/table/api.js,表格是否开启可选择模式。
site/app/pages/components/table/api.js,当表格处于可选择模式时，指定表格的已选择行。
site/app/pages/components/table/api.js,传递给行循环使用的 <code>&lt;for&gt;</code> 组件的 key。
site/app/pages/components/table/api.js,传递给列循环使用的 <code>&lt;for&gt;</code> 组件的 key。
site/app/pages/components/table/api.js,参数
site/app/pages/components/table/api.js,表格的选中行发生变化时触发。只在表格开启选择模式时有效。
site/app/pages/components/table/api.js,表头的文本。可以不指定该属性，然后用 slot 来渲染自定义表头。
site/app/pages/components/table/api.js,数据的属性。用于从行数据中获取属性值并展示到单元格里。可以不指定该属性，然后用 slot 来渲染自定义单元格。
site/app/pages/components/table/api.js,指定当前列是否是数值类型。数值类型的列会右对齐。
site/app/pages/components/table/index.html,表格组件用于显示原始数据集，通常被用在桌面（而不是移动平台）产品中。表格组件支持许多属性来更改和影响布局。
site/app/pages/components/table/index.html,"虽然 Jinge Material 项目<router-link text=""移植自 Vue Material"" to=""about""/>，但表格组件的接口和使用的设计，参考的是 <a href=""https://element.eleme.cn/"" target=""_blank"">Element</a> 组件库。"
site/app/pages/components/table/index.html,基础表格
site/app/pages/components/table/index.html,表格由 <code>md-table</code> 和 <code>md-table-column</code> 两个组件构成。前者用于创建表格，后者用于在表格内定义每一列。
site/app/pages/components/table/index.html,在卡片中的带工具栏的表格
site/app/pages/components/table/index.html,表格可以和其它组件搭配使用，比如添加工具栏并放置在卡片中：
site/app/pages/components/table/index.html,可选模式
site/app/pages/components/table/index.html,表格可开启可选择模式，该模式下可以通过 Checkbox 来选择行数据。
site/app/pages/components/table/index.html,自定义模版
site/app/pages/components/table/index.html,可以通过为 <code>md-table-column</code> 指定 slot 来使用自定义模版。其中，传送默认的 slot，可指定表格内容(td)模版；传递 head slot，可指定表头(th)的模版。
site/app/pages/components/table/index.html,表头 slot 用于渲染每一个表头，可使用的数据包括 column 和 columnIndex。表格内容 slot 用于渲染每一行的每一个单元格，可使用的数据包括：
site/app/pages/components/table/index.html,: 单元格对应的行数据。
site/app/pages/components/table/index.html,: 单元格对应的行的索引。
site/app/pages/components/table/index.html,: 单元格对应的行是否被选中。只在表格开启可选模式下有用。
site/app/pages/components/table/index.html,: 单元格对应的列。
site/app/pages/components/table/index.html,: 单元格对应的列的索引。
site/app/pages/components/table/index.html,行的自定义样式
site/app/pages/components/table/index.html,如果表格的某一行需要有特别的样式，可以通过 <code>rowClass</code> 属性为该行指定额外的样式类。这个属性必须指定为函数，函数接收行数据，返回样式类。
site/app/pages/components/table/index.html,分页
site/app/pages/components/table/index.html,表格的分页需要使用分页组件来配合实现：
site/app/pages/components/table/index.html,TODO: 实现包括固定表头，排序等更多丰富的功能。
site/app/pages/components/table/index.html,表格
site/app/pages/components/tabs/api.js,名称
site/app/pages/components/tabs/api.js,描述
site/app/pages/components/tabs/api.js,默认值
site/app/pages/components/tabs/api.js,设置当前激活状态的标签页。可以指定为数字索引，也可以指定为 <code>md-tab</code> 组件的 id 属性值。
site/app/pages/components/tabs/api.js,设置标签页的对齐方式。请参见下面每种布局的详细说明。
site/app/pages/components/tabs/api.js,使用左对齐
site/app/pages/components/tabs/api.js,使用居中对齐
site/app/pages/components/tabs/api.js,使用右对齐
site/app/pages/components/tabs/api.js,标签页撑满屏幕可用空间
site/app/pages/components/tabs/api.js,指定工具栏高度使用动态过渡。请谨慎使用使用此选项，以免降低页面性能。
site/app/pages/components/tabs/api.js,为标签页指定阴影(Elevation)，默认无阴影。
site/app/pages/components/tabs/api.js,参数
site/app/pages/components/tabs/api.js,当激活的标签页变化时触发。
site/app/pages/components/tabs/api.js,唯一标识，可用于配合 active 属性指定激活的标签页。
site/app/pages/components/tabs/api.js,为标签页添加 html 超链接。
site/app/pages/components/tabs/api.js,标签页的文本
site/app/pages/components/tabs/api.js,禁用某个标签页
site/app/pages/components/tabs/api.js,为标签页添加 jinge-router 的路由功能，指定目标路由状态。
site/app/pages/components/tabs/api.js,附加给标签页的额外数据。可用于传递给标签页内容的渲染 Slot。
site/app/pages/components/tabs/index.html,标签页也叫选项卡。使用标签页可以轻松浏览，在不同视图之间切换以及启用高级别的内容组织，例如不同的数据集或应用程序的功能方面。
site/app/pages/components/tabs/index.html,导航标签页
site/app/pages/components/tabs/index.html,可以使用标签页作为应用程序的主导航。标签页默认情况下可以和 jinge-router 无缝集成，可以像按钮或 router-link 组件一样使用 <code>to</code>、<code>params</code> 等属性。
site/app/pages/components/tabs/index.html,标签页内容
site/app/pages/components/tabs/index.html,在前面的示例中，选项卡的工作原理与导航按钮相同，但没有内容。可以指定自定义内容。可以将任意内容传递到选项卡。可以与路由器同步：
site/app/pages/components/tabs/index.html,对齐方式
site/app/pages/components/tabs/index.html,选项卡具有四种类型的导航按钮对齐方式：左，中，右和固定。 您可以将它们与任何选项卡一起使用：
site/app/pages/components/tabs/index.html,图标
site/app/pages/components/tabs/index.html,可以在标签页中使用图标，以使得用户更容易理解标签的内容：
site/app/pages/components/tabs/index.html,自定义模版
site/app/pages/components/tabs/index.html,通过 slot 可以指定标签页里面的内容的自定义模板。下面是一个提示未读信息的简单示例：
site/app/pages/components/tabs/index.html,标签页
site/app/pages/components/toolbar/api.js,名称
site/app/pages/components/toolbar/api.js,描述
site/app/pages/components/toolbar/api.js,默认值
site/app/pages/components/toolbar/api.js,设置工具栏的阴影（Elevation）
site/app/pages/components/toolbar/api.js,使用透明工具栏
site/app/pages/components/toolbar/api.js,使用紧凑型布局
site/app/pages/components/toolbar/api.js,使用中等大小的工具栏
site/app/pages/components/toolbar/api.js,使用大型工具栏
site/app/pages/components/toolbar/api.js,创建工具栏行，通常在大型工具栏上使用
site/app/pages/components/toolbar/api.js,向任何工具栏行添加左偏移量，仅适用于 md-toolbar-row。
site/app/pages/components/toolbar/api.js,在工具栏或工具栏行的左侧创建一个区域，该区域通常用于放置应用程序菜单按钮和标题。
site/app/pages/components/toolbar/api.js,在工具栏或工具栏行的右侧创建一个区域，该区域通常用于放置工具栏的主要动作，例如更多操作的按钮。
site/app/pages/components/toolbar/api.js,创建工具栏的标题。
site/app/pages/components/toolbar/index.html,工具栏操作显示在受其操作影响的视图前面。工具栏会显示在受其影响的内容前面一个层阶。工具栏可以控制宽度来容纳其中的内容。
site/app/pages/components/toolbar/index.html,常规工具栏
site/app/pages/components/toolbar/index.html,工具栏会根据屏幕宽度调整高度尺寸，以最适合小型设备上的可见区域。 尝试调整您的浏览器大小以查看区别：
site/app/pages/components/toolbar/index.html,不同大小的工具栏
site/app/pages/components/toolbar/index.html,内容和响应
site/app/pages/components/toolbar/index.html,由于工具栏主要用于执行影响整个应用程序的操作，因此您可以在其中创建行或节。
site/app/pages/components/toolbar/index.html,尽管这些行适用于每个工具栏，但它们的创建是为了分隔大型工具栏的内容。该元素由 <code>md-toolbar-row</code> 类表示。行还可以具有 <code>md-toolbar-offset</code> 在其左侧添加一些空格。这通常在大型工具栏的第二行中使用。
site/app/pages/components/toolbar/index.html,这些部分用于水平拆分工具栏的内容（或内部的行）。可以使用两种类型的部分来应用它们：<code>md-toolbar-section-start</code> 将左对齐，而 <code>md-toolbar-section-end</code> 右对齐。
site/app/pages/components/toolbar/index.html,以下的类用于构造工具栏中的各种元素。
site/app/pages/components/toolbar/index.html,工具栏
site/app/pages/components/tooltip/api.js,名称
site/app/pages/components/tooltip/api.js,描述
site/app/pages/components/tooltip/api.js,默认值
site/app/pages/components/tooltip/api.js,工具提示的内容
site/app/pages/components/tooltip/api.js,参看 Popover 组件
site/app/pages/components/tooltip/examples/simple.html,简单的 Tooltip：
site/app/pages/components/tooltip/examples/simple.html,你好，世界！
site/app/pages/components/tooltip/examples/simple.html,改变 placement 和 delay：
site/app/pages/components/tooltip/examples/simple.html,通过父组件里的参数控制显示和隐藏：
site/app/pages/components/tooltip/examples/simple.html,展示自定义的内容：
site/app/pages/components/tooltip/examples/simple.html,编辑
site/app/pages/components/tooltip/examples/simple.html,"你好，红色的<span style=""color: red;"">世界</span>！"
site/app/pages/components/tooltip/index.html,工具提示用于在鼠标悬停时会展示提示信息，提示信息可能包含有关其功能的简短说明，也可以是更丰富的 HTML 信息。
site/app/pages/components/tooltip/index.html,工具提示
site/app/pages/components/tooltip/index.html,Popover 组件的所有 API 也可用于 Tooltip 组件。但部分属性的默认值不同。
site/app/pages/getting-started.html,Jinge Material 是构建在 jinge 框架上的 Material Design 组件库，此处假设你已经知道如何搭建基本的 jinge 框架的项目，比如如何在 webpack 中配置和使用 jinge-loader。
site/app/pages/getting-started.html,jinge 框架还处于实验性的阶段，也还几乎没有文档。此处的 Jinge Material 组件库的文档也不保证有效。因此，体验 jinge 框架和 Jinge Material 组件库的最佳方式是直接克隆 Jinge Material 的源码仓库。这个仓库包含了所有组件的源码，以及一个涵盖所有组件的使用示例的完整应用（也就是你现在看到的这个网站）。
site/app/pages/getting-started.html,安装
site/app/pages/getting-started.html,要使用 Jinge Material 组件库，需要先通过 npm 或 yarn 的方式安装：
site/app/pages/getting-started.html,使用
site/app/pages/getting-started.html,我们推荐使用编译后的发布版本，样式文件位于 jinge-material/dist 目录下，组件文件位于 jinge-material/lib 目录下。同时，我们推荐按需引入组件，这样可以获得最快地构建速度和开发体验。
site/app/pages/getting-started.html,在项目的入口 js 文件中引入样式和语言包：
site/app/pages/getting-started.html,在模板 html 文件中按需使用组件：
site/app/pages/getting-started.html,"Jinge Material 组件库支持多种样式主题和多种语言，但没有默认的样式或语言。因此，只使用一种样式或语言也需要先主动注册资源。如果项目需要支持多种主题和语言，参看<router-link to=""i18n"">国际化</router-link>和<router-link to=""theme"">主题</router-link>章节。"
site/app/pages/getting-started.html,浏览器引入
site/app/pages/getting-started.html,对于微服务架构的大型前端项目，可能多个动态加载的服务/模块都会使用 jinge 框架和Jinge Material 组件库，这种情况下需要在项目入口 index.html 中通过 script的方式引入样式、语言资源和组件库：
site/app/pages/getting-started.html,然后在模板 html 文中可以简单地引用组件：
site/app/pages/getting-started.html,上述代码需要配置打包工具的外部依赖（比如 webpack 的 externals），让 jinge-material 实际指向 window.JingeMaterial 对象。
site/app/pages/getting-started.html,使用组件别名
site/app/pages/getting-started.html,jinge 框架支持注册自定义组件别名，这样在模板 html 文件中可以不需要引入组件而直接使用。Jinge Material 组件库提供了默认的别名，只需要在 webpack.config.js 文件中注册即可：
site/app/pages/getting-started.html,注册别名后，在模板 html 文件中，可以直接使用 <code>md-[component]</code> 这样格式的别名：
site/app/pages/getting-started.html,按需加载样式
site/app/pages/getting-started.html,上述的使用方式，都会完整引入全部的样式文件。你可以通过直接使用 Jinge Material 源码的形式，来按需加载样式和组件。你可以克隆这个脚手架项目，里面有完整的 webpack 的配置文件示例，此处不再赘述。
site/app/pages/getting-started.html,快速上手
site/app/pages/home/index.html,构建在 Jinge 框架上的 Material Design 组件库
site/app/pages/home/index.html,快速上手
site/app/pages/home/index.html,浏览组件
site/app/pages/home/index.html,精准实现 Google Material Design 设计规范。
site/app/pages/home/index.html,适配所有主流的现代浏览器，支持移动设备的响应式。
site/app/pages/home/index.html,支持多皮肤主题，国际化多语言等丰富全面的功能。
site/app/pages/home/index.js,Jinge Material - 构建在 Jinge 框架上的 Material Design 组件库
site/app/pages/license.js,许可证
site/app/pages/ui-elements/elevation/apis.js,名称
site/app/pages/ui-elements/elevation/apis.js,描述
site/app/pages/ui-elements/elevation/apis.js,为元素添加阴影（Elevation），深度可以是 1、2、3、4、6、8、12、16 或 24，例如：md-elevation-4。
site/app/pages/ui-elements/elevation/index.html,"阴影（Elevation）用于指示元素距离表面（Surface）的距离。Material Design 设计规范中定义了 9 种程度的阴影深度，依次是 1, 2, 3, 4, 6, 8, 12, 16, 24。Jinge Material 提供了对应的 9 种 class 可供使用："
site/app/pages/ui-elements/elevation/index.html,阴影
site/app/pages/ui-elements/layout/apis.js,名称
site/app/pages/ui-elements/layout/apis.js,描述
site/app/pages/ui-elements/layout/apis.js,宽度
site/app/pages/ui-elements/layout/apis.js,适用于最大 599px 宽的屏幕，比如大、中、小型人像手机以及纵向的小型平板电脑。
site/app/pages/ui-elements/layout/apis.js,适用于宽度介于 600 像素到 959 像素之间的屏幕，比如中型和大型手机、纵向模式的小型和大型平板电脑以及某些台式机显示器。
site/app/pages/ui-elements/layout/apis.js,适用于 960 像素至 1279 像素之间的屏幕，比如横向和台式显示器中的小型和大型平板电脑。
site/app/pages/ui-elements/layout/apis.js,适用于 1280 像素至 1919 像素之间的屏幕，比如大型台式机显示器。
site/app/pages/ui-elements/layout/apis.js,适用于宽于 1920 像素的屏幕，比如大型台式机显示器或并排屏幕。
site/app/pages/ui-elements/layout/apis.js,屏幕大小
site/app/pages/ui-elements/layout/apis.js,间隙
site/app/pages/ui-elements/layout/apis.js,布局项目之间使用自动计算的间隙。
site/app/pages/ui-elements/layout/apis.js,默认情况下，布局项目将始终包装在父布局下。 如果要禁用此行为，请使用此类，但是响应性将不起作用。
site/app/pages/ui-elements/layout/apis.js,设置所有子项的对齐方式，仅当 [x] 和 [y] 同时存在时，对齐方式才有效，例如 <code>md-alignment-top-center</code>。 可能的值包括：
site/app/pages/ui-elements/layout/apis.js,设置元素的布局大小，按百分比计算，[amount] 可以是 33、66 或 5 的倍数，例如 <code>md-size-25</code>。
site/app/pages/ui-elements/layout/apis.js,设置元素在特定断点下的布局大小，可能的值包括：
site/app/pages/ui-elements/layout/apis.js,设置元素在特定断点下隐藏，可能的值包括：
site/app/pages/ui-elements/layout/index.html,Material Design 中的响应式布局可适应任何可能的屏幕尺寸，该布局方案包括一个灵活的网格系统，以确保各个布局之间的一致性。
site/app/pages/ui-elements/layout/index.html,断点
site/app/pages/ui-elements/layout/index.html,使用断点来控制响应式布局：
site/app/pages/ui-elements/layout/index.html,列布局
site/app/pages/ui-elements/layout/index.html,列布局系统通过 css 的 flexbox 实现，从而提供了灵活而便捷的 API。
site/app/pages/ui-elements/layout/index.html,使用布局系统，需要先创建一个 <code>md-layout</code> 的父元素，然后在其下创建任意数量的 <code>md-layout-item</code> 列表：
site/app/pages/ui-elements/layout/index.html,默认情况下，布局项之间没有间隙。可以设置为基于屏幕宽度和断点自动计算元素之间的间距：
site/app/pages/ui-elements/layout/index.html,试试调整浏览器的大小并观察布局变化：
site/app/pages/ui-elements/layout/index.html,布局列也可用于嵌套布局：
site/app/pages/ui-elements/layout/index.html,可以指定 <code>md-layout</code> 使用不同的对齐方式，并可以对 <code>md-alignment-[horizontal]-[vertical]</code> 类进行水平和垂直对齐的各种组合，例如，<code>md-alignment-top-center</code>。对齐在父元素上起作用，它将更改所有子项的位置：
site/app/pages/ui-elements/layout/index.html,使用 <code>md-size-[amount]</code> 可以指定元素在布局中的大小，例如 <code>md-size-30</code>。其中，[amount] 的值可以是 33、66 或 5 的倍数。
site/app/pages/ui-elements/layout/index.html,不是所有元素都必须指定布局大小。对于没有指定大小的元素，会自动计算其大小：
site/app/pages/ui-elements/layout/index.html,使用 <code>md-[breakpoint]-size-[amount]</code> 可以基于断点来更改布局大小。尝试调整浏览器的大小：
site/app/pages/ui-elements/layout/index.html,可以使用 <code>md-[breakpoint]-hide</code> 类来实现在较小屏幕上隐藏某个元素：
site/app/pages/ui-elements/layout/index.html,以下类可以被应用到任何 HTML 元素上：
site/app/pages/ui-elements/layout/index.html,以下类可以应用于任何<code>md-layout</code>的直接子元素：
site/app/pages/ui-elements/layout/index.html,布局
site/app/pages/ui-elements/states/apis.js,名称
site/app/pages/ui-elements/states/apis.js,描述
site/app/pages/ui-elements/states/apis.js,对应 Material Design States 规范里的 Container，指定状态的容器层。
site/app/pages/ui-elements/states/apis.js,对应 Material Design States 规范里的 Overlay，指定状态的悬停层。
site/app/pages/ui-elements/states/apis.js,对应 Material Design States 规范里的 Content，指定状态的内容层。
site/app/pages/ui-elements/states/apis.js,指定使用设计规范里的 Content: On Surface 类型。
site/app/pages/ui-elements/states/apis.js,指定使用设计规范里的 Content: Primary 类型。
site/app/pages/ui-elements/states/apis.js,指定使用设计规范里的 Content: On Primary 类型。
site/app/pages/ui-elements/states/index.html,状态包括悬停，点击，焦点，禁用等情况下的交互响应。Material Design 使用 Content/Overlay/Container 三层模型来统一了状态的设计。
site/app/pages/ui-elements/states/index.html,状态
site/app/pages/ui-elements/typography/apis.js,名称
site/app/pages/ui-elements/typography/apis.js,描述
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Headline 1 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Headline 2 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Headline 3 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Headline 4 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Headline 5 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Headline 6 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Subtitle 1 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Subtitle 2 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Body 1 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Body 2 样式。
site/app/pages/ui-elements/typography/apis.js,对应于 Material Design 设计规范中的 Caption 样式。
site/app/pages/ui-elements/typography/index.html,字体
site/app/pages/ui-elements/typography/index.html,Material Design 设计规范里的字体为 Roboto，推荐使用 Google Fonts 来加载字体资源。你需要在 html 的头里，加入以下的代码：
site/app/pages/ui-elements/typography/index.html,"当没有加载 Roboto 字体文件，或遇到 Roboto 字体未涵盖的字符（比如中文字符），会倒退到使用 <a href=""https://ant.design/docs/spec/font"" target=""_blank"">Ant Desgin</a> 里指定的兼容性字体列表："
site/app/pages/ui-elements/typography/index.html,文字样式
site/app/pages/ui-elements/typography/index.html,Material Desgin 设计规范约束了可以使用的文字样式（包括字号、粗细和行距）。Jinge Material 提供了这几类样式的 class 可供使用：
site/app/pages/ui-elements/typography/index.html,版式
